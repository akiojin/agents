<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="874" failures="53" errors="0" time="11.261652092">
    <testsuite name="src/index.test.ts" timestamp="2025-08-12T09:09:22.044Z" hostname="63accec1df8b" tests="1" failures="0" errors="0" skipped="0" time="0.001545291">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.00073">
        </testcase>
    </testsuite>
    <testsuite name="src/code-intelligence/symbol-index.test.ts" timestamp="2025-08-12T09:09:22.045Z" hostname="63accec1df8b" tests="8" failures="4" errors="0" skipped="0" time="0.768514917">
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; TypeScriptパーサー &gt; TypeScriptクラス、メソッド、インターフェースを正しく解析する" time="0.09125875">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-NYbtLz/test.db

            </system-out>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; JavaScriptパーサー &gt; JavaScriptクラス、関数、変数を正しく解析する" time="0.06603625">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-M1rO5R/test.db

            </system-out>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; Pythonパーサー &gt; Pythonクラス、メソッド、関数を正しく解析する" time="0.063391833">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-vWw802/test.db

            </system-out>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ src/code-intelligence/symbol-index.test.ts:134:30
            </failure>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; Javaパーサー &gt; Javaクラス、メソッド、インターフェースを正しく解析する" time="0.101677083">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-XrR3aG/test.db

            </system-out>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ src/code-intelligence/symbol-index.test.ts:178:30
            </failure>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; Goパーサー &gt; Go構造体、関数、インターフェースを正しく解析する" time="0.08191125">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-eH5qE6/test.db

            </system-out>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ src/code-intelligence/symbol-index.test.ts:222:28
            </failure>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; Rustパーサー &gt; Rust構造体、関数、トレイトを正しく解析する" time="0.160223">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-tT4d6J/test.db

            </system-out>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ src/code-intelligence/symbol-index.test.ts:267:28
            </failure>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; シンボル検索機能 &gt; 名前でシンボルを検索できる" time="0.112218292">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-brwWhB/test.db

            </system-out>
        </testcase>
        <testcase classname="src/code-intelligence/symbol-index.test.ts" name="多言語シンボルパーサー &gt; シンボル検索機能 &gt; 言語でシンボルを絞り込める" time="0.090796334">
            <system-out>
多言語対応シンボルインデックス初期化完了: /tmp/symbol-test-3PcABL/test.db

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-08-12T09:09:22.052Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.002695875">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001113625">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000112417">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000087">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000061833">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000069958">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.000079917">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000067792">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000086458">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000158875">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000072458">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000051125">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-08-12T09:09:22.055Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.028054375">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.007365917">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.002379375">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.013147917">
            <system-out>
Loaded cached credentials.

            </system-out>
            <system-err>
Error retrieving user info: TypeError: Cannot read properties of undefined (reading &apos;filter&apos;)
    at cacheGoogleAccount [90m(/agents/packages/core/[39msrc/utils/user_account.ts:52:31[90m)[39m
    at fetchAndCacheUserInfo [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:385:7[90m)[39m
    at Module.getOauthClient [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:91:9[90m)[39m
    at [90m/agents/packages/core/[39msrc/code_assist/oauth2.test.ts:283:7
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.000716375">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.00122075">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.001088167">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.001414792">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-08-12T09:09:22.059Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.0115655">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.00181375">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.00222525">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.000984833">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.002795584">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.000875125">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.000708458">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.001407458">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-08-12T09:09:22.061Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.003861667">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should use GOOGLE_CLOUD_PROJECT when set" time="0.002222917">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should treat empty GOOGLE_CLOUD_PROJECT as undefined and use project from server" time="0.000400458">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000548167">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-08-12T09:09:22.062Z" hostname="63accec1df8b" tests="23" failures="0" errors="0" skipped="0" time="0.038156917">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.023105791">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.002696458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.001385708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.000477834">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.000457708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000438792">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000430708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.0007945">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000856375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000440417">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000364042">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000392333">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000401417">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.0012445">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000460333">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000396042">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000371875">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000351042">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000331458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.000339209">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000324667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should update memory and file count on successful refresh" time="0.000714333">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should propagate errors from loadServerHierarchicalMemory" time="0.000452792">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-08-12T09:09:22.068Z" hostname="63accec1df8b" tests="10" failures="0" errors="0" skipped="0" time="0.027938084">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.021871458">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.000643292">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.000870208">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.000491708">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000686833">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000323833">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.000345625">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000327334">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000376208">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.000987125">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-08-12T09:09:22.070Z" hostname="63accec1df8b" tests="31" failures="7" errors="0" skipped="0" time="0.355612125">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.001204708">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000118">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000126958">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.000049292">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.000040334">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.000039625">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.000056208">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.088893708">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.007319834">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.006151666">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.007683875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.006348334">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.006005167">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.006385292">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.006666292">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.025599375">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -10,11 +10,10 @@[90m
[2m          Symbol(kReason): undefined,[22m
[2m          Symbol(kComposite): false,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[2m        &quot;temperature&quot;: 0.5,[22m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ]

Received: 

  1st spy call:

@@ -10,11 +10,10 @@
          Symbol(kReason): undefined,
          Symbol(kComposite): false,
        },
        &quot;systemInstruction&quot;: undefined,
        &quot;temperature&quot;: 0.5,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:345:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.007287583">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -13,12 +13,10 @@[90m
[2m        &quot;responseMimeType&quot;: &quot;application/json&quot;,[22m
[2m        &quot;responseSchema&quot;: {[22m
[2m          &quot;type&quot;: &quot;string&quot;,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[32m-       &quot;temperature&quot;: 0,[90m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ]

Received: 

  1st spy call:

@@ -13,12 +13,10 @@
        &quot;responseMimeType&quot;: &quot;application/json&quot;,
        &quot;responseSchema&quot;: {
          &quot;type&quot;: &quot;string&quot;,
        },
        &quot;systemInstruction&quot;: undefined,
-       &quot;temperature&quot;: 0,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:373:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0.007015916">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -15,11 +15,10 @@[90m
[2m          &quot;type&quot;: &quot;string&quot;,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[2m        &quot;temperature&quot;: 0.9,[22m
[2m        &quot;topK&quot;: 20,[22m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st spy call:

@@ -15,11 +15,10 @@
          &quot;type&quot;: &quot;string&quot;,
        },
        &quot;systemInstruction&quot;: undefined,
        &quot;temperature&quot;: 0.9,
        &quot;topK&quot;: 20,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:408:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.006191791">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.009056751">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.007921333">
            <system-out>
[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 699/1000 (70%)
[Compression Debug] Remaining: 301 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.009284584">
            <system-out>
[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 700/1000 (70%)
[Compression Debug] Remaining: 300 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/core/client.test.ts:537:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.023846625">
            <system-out>
[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 700/1000 (70%)
[Compression Debug] Remaining: 300 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/core/client.test.ts:589:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.027330834">
            <system-out>
[Compression Debug] Model: test-model, Token Limit: undefined
[Compression Debug] Current Usage: 10/undefined (NaN%)
[Compression Debug] Remaining: NaN tokens
[Compression Debug] Compression Threshold: NaN (95%)
[Compression Debug] Force flag: true, Tool threshold: false
[Compression Debug] Starting compression...

⏳ 圧縮処理を開始しています...
📊 ステップ1/4: トークン数を計算中...
📝 ステップ2/4: 履歴を分析中... (圧縮対象: 0件, 保持: 1件)

[Compression] Saved compression event to Memory API
🤖 ステップ3/4: サマリーを生成中...

💾 ステップ4/4: 新しいセッションを作成中...

Stored project memory: compression_summary_session-1754989756303-31ca7a7a = {&quot;sessionId&quot;:&quot;session-1754989756303-31ca7a7a&quot;,&quot;parentSessionId&quot;:&quot;session-1754989756299-4b310559&quot;,&quot;compressedFrom&quot;:10,&quot;timestamp&quot;:&quot;2025-08-12T09:09:16.307Z&quot;}

[Compression] Saved compression summary to Memory API

[Compression Debug] Compression complete: 10 -&gt; 5 tokens
[Compression Debug] Reduction: 50%

✅ 圧縮処理が完了しました！
📉 トークン数: 10 → 5 (50%削減)

            </system-out>
            <system-err>
Unknown memory key: compression_summary_session-1754989756303-31ca7a7a

            </system-err>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.012750042">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.009646917">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.009466334">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.009592541">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.010242542">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.027879375">
            <system-out>
[Compression Debug] Model: test-model-changed-1, Token Limit: undefined
[Compression Debug] Current Usage: 100000/undefined (NaN%)
[Compression Debug] Remaining: NaN tokens
[Compression Debug] Compression Threshold: NaN (95%)
[Compression Debug] Force flag: true, Tool threshold: false
[Compression Debug] Starting compression...

⏳ 圧縮処理を開始しています...
📊 ステップ1/4: トークン数を計算中...
📝 ステップ2/4: 履歴を分析中... (圧縮対象: 2件, 保持: 0件)

[Compression] Saved compression event to Memory API
🤖 ステップ3/4: サマリーを生成中...

💾 ステップ4/4: 新しいセッションを作成中...

Stored project memory: compression_summary_session-1754989756384-36d71bd0 = {&quot;summary&quot;:&quot;Summary&quot;,&quot;sessionId&quot;:&quot;session-1754989756384-36d71bd0&quot;,&quot;parentSessionId&quot;:&quot;session-1754989756303-31ca7a7a&quot;,&quot;compressedFrom&quot;:100000,&quot;timestamp&quot;:&quot;2025-08-12T09:09:16.388Z&quot;}

[Compression] Saved compression summary to Memory API

[Compression Debug] Compression complete: 100000 -&gt; 5000 tokens
[Compression Debug] Reduction: 95%

✅ 圧縮処理が完了しました！
📉 トークン数: 100000 → 5000 (95%削減)

            </system-out>
            <system-err>
Unknown memory key: compression_summary_session-1754989756384-36d71bd0

            </system-err>
            <failure message="expected 2nd &quot;spy&quot; call to have been called with [ { …(2) } ]" type="AssertionError">
AssertionError: expected 2nd &quot;spy&quot; call to have been called with [ { …(2) } ]

- Expected
+ Received

  [
    {
      &quot;contents&quot;: Any&lt;Array&gt;,
-     &quot;model&quot;: &quot;test-model-changed-2&quot;,
+     &quot;model&quot;: &quot;test-model-changed-1&quot;,
    },
  ]

 ❯ src/core/client.test.ts:988:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.014287875">
            <failure message="expected null to be &apos;gemini-2.5-flash&apos; // Object.is equality" type="AssertionError">
AssertionError: expected null to be &apos;gemini-2.5-flash&apos; // Object.is equality

- Expected: 
&quot;gemini-2.5-flash&quot;

+ Received: 
null

 ❯ src/core/client.test.ts:1016:22
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-08-12T09:09:22.084Z" hostname="63accec1df8b" tests="7" failures="5" errors="0" skipped="0" time="0.015927042">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.001146333">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.001172333">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.010787834">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:80:16
 ❯ src/core/contentGenerator.test.ts:88:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.000668167">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:80:16
 ❯ src/core/contentGenerator.test.ts:98:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000397917">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:80:16
 ❯ src/core/contentGenerator.test.ts:108:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.000445083">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:80:16
 ❯ src/core/contentGenerator.test.ts:119:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.000363959">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:80:16
 ❯ src/core/contentGenerator.test.ts:131:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-08-12T09:09:22.088Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.008262875">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.002796291">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.003992958">
            <system-out>
[DEBUG] Tool execution completed for mockModifiableTool (1): { toolResult: [32m&apos;Tool executed&apos;[39m, returnDisplay: [32m&apos;Tool executed&apos;[39m }
[DEBUG] Function response created for mockModifiableTool (1): {
  functionResponse: {
    id: [32m&apos;1&apos;[39m,
    name: [32m&apos;mockModifiableTool&apos;[39m,
    response: { output: [32m&apos;Tool executed&apos;[39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000133958">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000067792">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.000057958">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000070125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000065541">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000072625">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000061208">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000057583">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000050541">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.0000535">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000052833">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-08-12T09:09:22.091Z" hostname="63accec1df8b" tests="21" failures="0" errors="0" skipped="0" time="0.010221833">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.003296084">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000463625">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000230167">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.000288417">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000260375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000187">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.000211333">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000321958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.000362958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.000251333">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.000386625">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000310166">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.000296667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.000496166">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000413833">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000290291">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.00029525">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.000259584">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.00029525">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000226959">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000242167">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-08-12T09:09:22.096Z" hostname="63accec1df8b" tests="12" failures="0" errors="0" skipped="0" time="0.002579708">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000721542">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000077541">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000619708">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.000079792">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000051083">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000041334">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000043">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.000046584">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.000043791">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000042459">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000059584">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000038917">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-08-12T09:09:22.099Z" hostname="63accec1df8b" tests="22" failures="0" errors="0" skipped="0" time="0.093047333">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.005208084">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.003685916">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.003647458">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.003068916">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.005616959">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.003989334">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.00334425">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.004759833">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.002153834">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.007595833">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.002805208">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.008045833">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.006382125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.003408916">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.00277525">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002510375">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.002975958">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.010254667">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1246:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.002462">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1246:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.002748625">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.001852334">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.002564125">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-08-12T09:09:22.105Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.005083334">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.003140833">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.000355917">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.00033625">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.000401333">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000207375">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-08-12T09:09:22.106Z" hostname="63accec1df8b" tests="9" failures="9" errors="0" skipped="0" time="0.021237584">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.012825917">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:36:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.001919291">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:44:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000826125">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:52:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000838125">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:63:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000882667">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:72:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000795542">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:81:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000764416">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:90:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000818416">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:98:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.00068925">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:106:20
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/intelligent-fs/intelligent-filesystem.test.ts" timestamp="2025-08-12T09:09:22.113Z" hostname="63accec1df8b" tests="25" failures="6" errors="0" skipped="0" time="7.561174128">
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; TypeScriptファイルを読み取り、シンボル情報を抽出できる" time="0.514204292">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989753612&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989753612/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989753612/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989753612/test.ts&apos;[39m,
  duration: [33m48[39m,
  symbolsFound: [33m5[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Pythonファイルを読み取り、シンボル情報を抽出できる" time="0.255554875">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989754126&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989754126/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989754126/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989754126/test.py&apos;[39m,
  duration: [33m23[39m,
  symbolsFound: [33m5[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Javaファイルを読み取り、シンボル情報を抽出できる" time="0.270207333">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989754382&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989754382/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989754382/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989754382/Test.java&apos;[39m,
  duration: [33m24[39m,
  symbolsFound: [33m7[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Goファイルを読み取り、シンボル情報を抽出できる" time="0.304274542">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989754652&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989754652/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989754652/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989754652/test.go&apos;[39m,
  duration: [33m25[39m,
  symbolsFound: [33m6[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Rustファイルを読み取り、シンボル情報を抽出できる" time="0.279183541">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989754956&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989754956/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989754956/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989754956/test.rs&apos;[39m,
  duration: [33m22[39m,
  symbolsFound: [33m6[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; セマンティック編集 &gt; シンボル単位での編集ができる" time="0.24075275">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989755236&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989755236/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989755236/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989755236/edit-test.ts&apos;[39m,
  duration: [33m11[39m,
  symbolsFound: [33m3[39m,
  cached: [33mfalse[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989755236/edit-test.ts&apos;[39m,
  duration: [33m1[39m,
  symbolsFound: [33m3[39m,
  cached: [33mtrue[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; セマンティック編集 &gt; 参照の自動更新ができる" time="0.318254709">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989755477&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989755477/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989755477/memory.db/memory.db

多言語プロジェクトのインデックスを開始...

2個のソースファイルを発見

インデックス完了: /tmp/intelligent-fs-test-1754989755477/usage.ts (1シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989755477/class.ts (2シンボル, typescript)
進捗: 500% (2/2)

多言語インデックス完了: 20ms
2ファイルから3シンボルをインデックス
言語別内訳: {
  typescript: [33m3[39m,
  javascript: [33m0[39m,
  python: [33m0[39m,
  java: [33m0[39m,
  go: [33m0[39m,
  rust: [33m0[39m,
  csharp: [33m0[39m,
  php: [33m0[39m,
  ruby: [33m0[39m,
  swift: [33m0[39m,
  kotlin: [33m0[39m,
  cpp: [33m0[39m,
  c: [33m0[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989755477/class.ts&apos;[39m,
  duration: [33m1[39m,
  symbolsFound: [33m2[39m,
  cached: [33mfalse[39m
}

            </system-out>
            <failure message="expected 0 to be greater than 0" type="AssertionError">
AssertionError: expected 0 to be greater than 0
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:305:52
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; コード品質を分析できる" time="0.390645917">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989755795&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989755795/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989755795/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989755795/quality-test.ts&apos;[39m,
  duration: [33m80[39m,
  symbolsFound: [33m23[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; バグを予測できる" time="0.286781001">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989756185&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989756185/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989756185/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756185/bug-test.ts&apos;[39m,
  duration: [33m23[39m,
  symbolsFound: [33m6[39m,
  cached: [33mfalse[39m
}

            </system-out>
            <failure message="expected undefined to be defined" type="AssertionError">
AssertionError: expected undefined to be defined
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:422:31
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; アーキテクチャを分析できる" time="0.663790375">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989756472&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989756472/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989756472/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/factory.ts&apos;[39m,
  duration: [33m28[39m,
  symbolsFound: [33m7[39m,
  cached: [33mfalse[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/god-class.ts&apos;[39m,
  duration: [33m286[39m,
  symbolsFound: [33m56[39m,
  cached: [33mfalse[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/singleton.ts&apos;[39m,
  duration: [33m28[39m,
  symbolsFound: [33m3[39m,
  cached: [33mfalse[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/factory.ts&apos;[39m,
  duration: [33m0[39m,
  symbolsFound: [33m7[39m,
  cached: [33mtrue[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/god-class.ts&apos;[39m,
  duration: [33m0[39m,
  symbolsFound: [33m56[39m,
  cached: [33mtrue[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989756472/singleton.ts&apos;[39m,
  duration: [33m0[39m,
  symbolsFound: [33m3[39m,
  cached: [33mtrue[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; コード生成ができる" time="0.319762875">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989757136&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989757136/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989757136/memory.db/memory.db

Generating class code {
  type: [32m&apos;class&apos;[39m,
  language: [32m&apos;typescript&apos;[39m,
  name: [32m&apos;UserProfile&apos;[39m,
  description: [32m&apos;ユーザープロファイルコンポーネント&apos;[39m
}

Learning session started: mem_1754989757439_5nxpjjxhm (react-component)

Session statistics calculated for session: mem_1754989757439_5nxpjjxhm

Learning session updated: mem_1754989757439_5nxpjjxhm

Generated 0 session improvements for session: mem_1754989757439_5nxpjjxhm

Learning session ended: mem_1754989757439_5nxpjjxhm. Duration: 0s, Actions: 0, Success Rate: NaN%

Generating class code {
  type: [32m&apos;class&apos;[39m,
  language: [32m&apos;typescript&apos;[39m,
  name: [32m&apos;UserCard&apos;[39m,
  description: [32m&apos;ユーザーカードコンポーネント&apos;[39m
}

            </system-out>
            <failure message="SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups" type="Error">
Error: SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: 5, code: &apos;SQLITE_BUSY&apos; }
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; リファクタリング提案ができる" time="0.300675792">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989757456&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989757456/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989757456/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989757456/refactor-test.ts&apos;[39m,
  duration: [33m31[39m,
  symbolsFound: [33m11[39m,
  cached: [33mfalse[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; コードパターンを学習できる" time="0.261466708">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989757757&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989757757/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989757757/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; エラーパターンを記録し学習できる" time="0.275813292">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989758018&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989758018/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989758018/memory.db/memory.db

            </system-out>
            <failure message="SQLITE_ERROR: no such function: SIMILARITY" type="Error">
Error: SQLITE_ERROR: no such function: SIMILARITY
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: 1, code: &apos;SQLITE_ERROR&apos; }
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; セッション管理ができる" time="0.250288875">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989758294&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989758294/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989758294/memory.db/memory.db

Learning session started: mem_1754989758512_54536ovnl (unit-testing)

Session statistics calculated for session: mem_1754989758512_54536ovnl

Learning session updated: mem_1754989758512_54536ovnl

Generated 0 session improvements for session: mem_1754989758512_54536ovnl

Learning session ended: mem_1754989758512_54536ovnl. Duration: 0s, Actions: 2, Success Rate: 100%

            </system-out>
            <failure message="expected +0 to be 2 // Object.is equality" type="AssertionError">
AssertionError: expected +0 to be 2 // Object.is equality

- Expected
+ Received

- 2
+ 0

 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:697:35
            </failure>
            <failure message="SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups" type="Error">
Error: SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: 5, code: &apos;SQLITE_BUSY&apos; }
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; 改善提案を生成できる" time="0.217492792">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989758544&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989758544/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989758544/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; パフォーマンスとキャッシング &gt; キャッシュが正しく動作する" time="0.244296458">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989758762&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989758762/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989758762/memory.db/memory.db

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989758762/cache-test.ts&apos;[39m,
  duration: [33m5[39m,
  symbolsFound: [33m1[39m,
  cached: [33mfalse[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989758762/cache-test.ts&apos;[39m,
  duration: [33m0[39m,
  symbolsFound: [33m1[39m,
  cached: [33mtrue[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; パフォーマンスとキャッシング &gt; 大規模プロジェクトのインデックスが作成できる" time="1.006849418">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989759006&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989759006/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989759006/memory.db/memory.db

多言語プロジェクトのインデックスを開始...

100個のソースファイルを発見

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file99.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file98.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file97.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file96.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file95.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file94.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file93.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file92.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file91.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file90.ts (2シンボル, typescript)
進捗: 10% (10/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file9.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file89.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file88.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file87.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file86.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file85.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file84.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file83.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file82.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file81.ts (2シンボル, typescript)
進捗: 20% (20/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file80.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file8.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file79.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file78.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file77.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file76.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file75.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file74.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file73.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file72.ts (2シンボル, typescript)
進捗: 30% (30/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file71.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file70.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file7.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file69.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file68.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file67.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file66.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file65.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file64.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file63.ts (2シンボル, typescript)
進捗: 40% (40/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file62.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file61.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file60.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file6.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file59.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file58.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file57.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file56.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file55.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file54.ts (2シンボル, typescript)
進捗: 50% (50/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file53.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file52.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file51.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file50.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file5.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file49.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file48.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file47.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file46.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file45.ts (2シンボル, typescript)
進捗: 60% (60/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file44.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file43.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file42.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file41.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file40.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file4.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file39.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file38.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file37.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file36.ts (2シンボル, typescript)
進捗: 70% (70/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file35.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file34.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file33.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file32.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file31.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file30.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file3.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file29.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file28.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file27.ts (2シンボル, typescript)
進捗: 80% (80/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file26.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file25.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file24.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file23.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file22.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file21.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file20.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file2.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file19.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file18.ts (2シンボル, typescript)
進捗: 90% (90/100)

インデックス完了: /tmp/intelligent-fs-test-1754989759006/file17.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file16.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file15.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file14.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file13.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file12.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file11.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file10.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file1.ts (2シンボル, typescript)
インデックス完了: /tmp/intelligent-fs-test-1754989759006/file0.ts (2シンボル, typescript)
進捗: 100% (100/100)

多言語インデックス完了: 725ms
100ファイルから200シンボルをインデックス
言語別内訳: {
  typescript: [33m200[39m,
  javascript: [33m0[39m,
  python: [33m0[39m,
  java: [33m0[39m,
  go: [33m0[39m,
  rust: [33m0[39m,
  csharp: [33m0[39m,
  php: [33m0[39m,
  ruby: [33m0[39m,
  swift: [33m0[39m,
  kotlin: [33m0[39m,
  cpp: [33m0[39m,
  c: [33m0[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 存在しないファイルのエラーを適切に処理する" time="0.235310167">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989760013&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989760013/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989760013/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 権限のないパスへのアクセスをブロックする" time="0.268489958">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989760249&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989760249/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989760249/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 大きすぎるファイルを拒否する" time="0.212862083">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989760516&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989760516/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989760516/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 不正な拡張子のファイルを拒否する" time="0.185823792">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989760729&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989760729/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989760729/memory.db/memory.db

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 統合シナリオ &gt; 完全なワークフローを実行できる" time="0.256716875">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/tmp/intelligent-fs-test-1754989760915&apos;[39m }

多言語対応シンボルインデックス初期化完了: /tmp/intelligent-fs-test-1754989760915/.agents/cache/symbol-index.db

TypeScript LSP Client initialized successfully

IntelligentFileSystem fully initialized [90mundefined[39m

Database schema setup completed with all tables and indexes

Memory integration manager initialized: /tmp/intelligent-fs-test-1754989760915/memory.db/memory.db

多言語プロジェクトのインデックスを開始...

1個のソースファイルを発見

インデックス完了: /tmp/intelligent-fs-test-1754989760915/src/user.service.ts (6シンボル, typescript)
進捗: 1000% (1/1)

多言語インデックス完了: 34ms
1ファイルから6シンボルをインデックス
言語別内訳: {
  typescript: [33m6[39m,
  javascript: [33m0[39m,
  python: [33m0[39m,
  java: [33m0[39m,
  go: [33m0[39m,
  rust: [33m0[39m,
  csharp: [33m0[39m,
  php: [33m0[39m,
  ruby: [33m0[39m,
  swift: [33m0[39m,
  kotlin: [33m0[39m,
  cpp: [33m0[39m,
  c: [33m0[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989760915/src/user.service.ts&apos;[39m,
  duration: [33m1[39m,
  symbolsFound: [33m6[39m,
  cached: [33mfalse[39m
}

Learning session started: mem_1754989761160_7u4o993st (refactoring)

Generating class code {
  type: [32m&apos;class&apos;[39m,
  language: [32m&apos;typescript&apos;[39m,
  name: [32m&apos;ImprovedUserService&apos;[39m,
  description: [32m&apos;改善されたユーザーサービス&apos;[39m
}

Intelligent file read completed {
  filePath: [32m&apos;/tmp/intelligent-fs-test-1754989760915/src/user.service.ts&apos;[39m,
  duration: [33m0[39m,
  symbolsFound: [33m6[39m,
  cached: [33mtrue[39m
}

Session statistics calculated for session: mem_1754989761160_7u4o993st

Learning session updated: mem_1754989761160_7u4o993st

Generated 0 session improvements for session: mem_1754989761160_7u4o993st

Learning session ended: mem_1754989761160_7u4o993st. Duration: 0s, Actions: 1, Success Rate: 100%

            </system-out>
            <failure message="expected false to be true // Object.is equality" type="AssertionError">
AssertionError: expected false to be true // Object.is equality

- Expected
+ Received

- true
+ false

 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:956:39
            </failure>
            <failure message="SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups" type="Error">
Error: SQLITE_BUSY: unable to close due to unfinalized statements or unfinished backups
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { errno: 5, code: &apos;SQLITE_BUSY&apos; }
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 単体テスト &gt; セキュリティチェック &gt; パストラバーサル攻撃を防ぐ" time="0.000239541">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/safe/path&apos;[39m }

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 単体テスト &gt; ファイルタイプ判定 &gt; 正しくファイルタイプを判定する" time="0.000194042">
            <system-out>
IntelligentFileSystem initialized { projectPath: [32m&apos;/&apos;[39m }

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-08-12T09:09:22.147Z" hostname="63accec1df8b" tests="9" failures="0" errors="0" skipped="0" time="0.004709">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.002063208">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.000324791">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.000307291">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.000171334">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000150417">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.000330833">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.000172708">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.000212708">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.00016375">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-08-12T09:09:22.149Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.005593042">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.00133925">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.000486">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000121916">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000276125">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000297875">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.000841083">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.000328833">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000149666">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000127333">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.000161792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.000265459">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.0001995">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000113167">
        </testcase>
    </testsuite>
    <testsuite name="src/services/ideContext.test.ts" timestamp="2025-08-12T09:09:22.152Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.004011083">
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should return undefined initially for active file context" time="0.000762333">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should set and retrieve the active file context" time="0.000444833">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should update the active file context when called multiple times" time="0.000095708">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should handle empty string for file path" time="0.000054917">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should notify subscribers when active file context changes" time="0.001584417">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should stop notifying a subscriber after unsubscribe" time="0.000186625">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should allow the cursor to be optional" time="0.00005875">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should clear the active file context" time="0.000071542">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-08-12T09:09:22.154Z" hostname="63accec1df8b" tests="20" failures="0" errors="0" skipped="0" time="0.007455083">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.001367166">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.000510542">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.000134958">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.000198042">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.0001645">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for fewer than CONTENT_LOOP_THRESHOLD identical content strings" time="0.000425167">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop on the CONTENT_LOOP_THRESHOLD-th identical content string" time="0.000094792">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for different content strings" time="0.000337208">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not check for loops when content has no sentence-ending punctuation" time="0.000076542">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not treat function calls or method calls as sentence endings" time="0.000796667">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should correctly identify actual sentence endings and trigger loop detection" time="0.001638959">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle content with mixed punctuation" time="0.000131791">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle empty sentences after trimming" time="0.000057959">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should require at least two sentences for loop detection" time="0.000105417">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should cache sentence extraction and only re-extract when content grows significantly" time="0.000072666">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should re-extract sentences when content grows by more than 100 characters" time="0.000208584">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should use indexOf for efficient counting instead of regex" time="0.000082625">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.000048209">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.000077334">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.000059375">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-08-12T09:09:22.159Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.030571">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.023931875">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.000586875">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.000347166">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.0008355">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000370625">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000312458">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000212833">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.000822459">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.000652209">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000469209">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000329875">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.00031675">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000462208">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-08-12T09:09:22.163Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.02103575">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.003667333">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.002428625">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.002739042">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.002272042">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.001729416">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.001623208">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.004018166">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.001723125">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-08-12T09:09:22.165Z" hostname="63accec1df8b" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/telemetry/telemetry.test.ts" name="src/telemetry/telemetry.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;ACCEPT&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;ACCEPT&apos;)
 ❯ createInitialMetrics src/telemetry/uiTelemetry.ts:94:25
 ❯ UiTelemetryService.&lt;instance_members_initializer&gt; src/telemetry/uiTelemetry.ts:103:30
 ❯ new UiTelemetryService src/telemetry/uiTelemetry.ts:102:8
 ❯ src/telemetry/uiTelemetry.ts:248:35
 ❯ src/telemetry/loggers.ts:37:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-08-12T09:09:22.165Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.004505084">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001181708">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.00074875">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000117666">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000100334">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000115">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000103166">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.00008025">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.000421458">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000277292">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000113958">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.0001265">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.000185667">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.00016375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-08-12T09:09:22.169Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.0060735">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.001849417">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.000577125">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore specified directories" time="0.000489">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.000545792">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect .gitignore files" time="0.001900167">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-08-12T09:09:22.170Z" hostname="63accec1df8b" tests="40" failures="0" errors="0" skipped="0" time="0.014705875">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.000747916">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.00007275">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.000047834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.000042916">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000053833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000051834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000036542">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000048042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.00017675">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.00004325">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000142458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.000038625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.000053916">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.000064542">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.00004075">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.000049417">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.000038125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.000036959">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.000063834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000048208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001242041">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000571833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.000727792">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000536375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.0006465">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.000465708">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.000406125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.000514959">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000707042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000496458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.001309208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.000806875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.000485208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.00043225">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.00054775">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000464625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.00039975">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000354208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000328583">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.000322584">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-08-12T09:09:22.180Z" hostname="63accec1df8b" tests="83" failures="0" errors="0" skipped="0" time="0.016709625">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.001890917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.0001245">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000152584">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000079209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.000119416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.00006">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000093916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.000058666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000091125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000054791">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000088125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.000058">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000093625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.0000545">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000087583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.000055333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.000093458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000056666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.000090959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000055334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.00009">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.000054875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000088375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.000057583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000187">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.000060375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.000088375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.000055375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.000155667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.001601292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000156209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000068125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.000055917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000053">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000055625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000051417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000053709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.000052875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000106917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000060375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000069875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.001885959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.000982333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000227917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000434583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.0001475">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.0001155">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000177083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000122417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000105708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000228334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000185875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.0001695">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000250959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000157542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000130458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000234375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000223292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000306333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000202917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000232833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.00010825">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000077875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000094959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.00007">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000095417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000068208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000060625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000058458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000065541">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000059791">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000059833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000060708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000057458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.000068416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000081375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000112542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000064833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000098875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000216834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000112958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000084375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000077542">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-08-12T09:09:22.201Z" hostname="63accec1df8b" tests="6" failures="5" errors="0" skipped="0" time="0.027095041">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.016567542">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;An error occurred. Full report available at: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;An error occurred. Report saved: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;An error occurred. Full report available at: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;An error occurred. Report saved: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:62:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.003531666">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Another error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;Another error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;Another error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;Another error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:86:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.001460625">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;String error occurred. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;String error occurred. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;String error occurred. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;String error occurred. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:110:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.00237175">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.000802541">
            <failure message="expected &quot;error&quot; to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Failed operation with BigInt. Could not stringify report content (likely due to context):&quot;,[90m
[32m-   TypeError {[90m
[32m-     &quot;message&quot;: &quot;Do not know how to serialize a BigInt&quot;,[90m
[32m-   },[90m
[31m+   &quot;Failed operation with BigInt. Report saved: /tmp/agents-client-error-bigint-fail-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ …(2) ]

Received: 

  1st error call:

  [
-   &quot;Failed operation with BigInt. Could not stringify report content (likely due to context):&quot;,
-   TypeError {
-     &quot;message&quot;: &quot;Do not know how to serialize a BigInt&quot;,
-   },
+   &quot;Failed operation with BigInt. Report saved: /tmp/agents-client-error-bigint-fail-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:170:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.000610792">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Simple error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;Simple error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;Simple error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;Simple error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:215:29
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-08-12T09:09:22.204Z" hostname="63accec1df8b" tests="36" failures="0" errors="0" skipped="0" time="0.046508459">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.002201333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000940583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.00067075">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000553625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.00048475">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.002110875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000320958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.00099425">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000486042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.000391167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000290708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000256">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.00037225">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000373958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000271291">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000287083">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000783708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000358459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000617708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000629041">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.000676708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.00119575">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.000497583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.003138666">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000830083">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.00089175">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.00049375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.000800125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.00122475">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.001437">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.000906042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000880667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.002107375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.002492458">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.001106667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.01332325">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-08-12T09:09:22.213Z" hostname="63accec1df8b" tests="4" failures="0" errors="0" skipped="0" time="0.207094167">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.021863541">
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.013171">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:30
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.170298834">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.000889875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-08-12T09:09:22.215Z" hostname="63accec1df8b" tests="36" failures="0" errors="0" skipped="0" time="0.004354625">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.000748875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.0000735">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000113917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.000116917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.000049916">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.000116">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.00005875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000091792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000062417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.000045541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000043542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000072875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000108541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000049084">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000065584">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000418542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.0000835">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000062583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000045792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000060666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000062625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000072">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.00005275">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000042459">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000073458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000049458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000069417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000045208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000063083">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000056167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000064666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.00004475">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000059708">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000053208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000053">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.000042375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-08-12T09:09:22.225Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.015423459">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.007680709">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000392">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.002018917">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000274583">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000277834">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.000223417">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.000228875">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.000228458">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.001147833">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000229791">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.00020025">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.001510583">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000251292">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-08-12T09:09:22.228Z" hostname="63accec1df8b" tests="15" failures="0" errors="0" skipped="0" time="0.009145584">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.002197083">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.001405875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.00043375">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000297583">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.00036825">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.000657333">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.000450875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.001019959">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000262458">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.00020575">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000209">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000182125">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.000259291">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.000194875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000159666">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-08-12T09:09:22.232Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.009158417">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.001588667">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.001228">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.000444416">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.00034825">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.000318">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.000496958">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.000434208">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.0004275">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.000386">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.002410625">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.000306083">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-08-12T09:09:22.235Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.005830125">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.001973667">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.000333917">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000211083">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000279">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000198541">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000229334">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000123">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000215083">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.00015575">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000151708">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000149042">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000151917">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000152292">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000756875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-08-12T09:09:22.238Z" hostname="63accec1df8b" tests="10" failures="0" errors="0" skipped="0" time="0.014999792">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.002412709">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.00102075">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.00135225">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.001075625">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.001132292">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.002009125">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.001067334">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.00129225">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.001626375">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_GEMINI_FLASH_MODEL" time="0.001241291">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-08-12T09:09:22.240Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.026338208">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.003121417">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.01445825">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:66:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.001594542">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:82:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000324833">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.000340292">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.000259584">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.001096083">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:164:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.001314084">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.000897167">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000389042">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000309167">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.000891">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.00059475">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-08-12T09:09:22.246Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.001935958">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.000737084">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000083375">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000129625">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000065708">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000047125">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000048292">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.000055916">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000072208">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-08-12T09:09:22.248Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.014530583">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.002551958">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.000984875">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.001164334">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.002709375">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.001947333">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.001390875">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.001503958">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.001419291">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_account.test.ts" timestamp="2025-08-12T09:09:22.250Z" hostname="63accec1df8b" tests="16" failures="0" errors="0" skipped="0" time="0.018063041">
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.003270083">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.001441125">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.004353583">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.001844958">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.000499417">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000172209">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000520833">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.000685542">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.001475458">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001284917">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000272333">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.000274875">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.000348666">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.000257625">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.000252833">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.000246375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-08-12T09:09:22.254Z" hostname="63accec1df8b" tests="1" failures="0" errors="0" skipped="0" time="0.001536625">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.000873958">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-08-12T09:09:22.254Z" hostname="63accec1df8b" tests="29" failures="0" errors="0" skipped="0" time="0.065638417">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.002314125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000620541">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000300792">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000499083">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000379625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.01815775">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.001616291">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.00119775">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.002803958">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.003039041">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.001576917">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.001661458">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.002271584">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.001465042">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.001838166">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.00323275">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.001436042">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.00127825">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.001387375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.00178775">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.00127375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.00111375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.003989917">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001949666">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.004829875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000571458">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.0005395">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.000784125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.000545">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-08-12T09:09:22.262Z" hostname="63accec1df8b" tests="27" failures="0" errors="0" skipped="0" time="1.206560251">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.081066208">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.057602666">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.058700333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.056252333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.058034917">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.057239792">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.058414625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.063833292">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.06505575">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.064540708">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.059124875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.060402625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.059361625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.057591">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.056593667">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.055559375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.055780125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.056229209">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.058169792">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.058353334">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.006434875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000230416">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000086416">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000057083">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000065458">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000513042">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000075042">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-08-12T09:09:22.268Z" hostname="63accec1df8b" tests="20" failures="0" errors="0" skipped="0" time="0.131193417">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.022830167">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.003367416">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.004365875">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.003005625">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.003659125">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.003955792">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.00273425">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.012507333">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.006826542">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.006080958">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.00750275">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.008777334">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.0105875">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.008226458">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.0048015">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.007789458">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.003130875">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.003079">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.004048833">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.002955958">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-08-12T09:09:22.275Z" hostname="63accec1df8b" tests="26" failures="0" errors="0" skipped="0" time="0.009385041">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should discover tools" time="0.001356416">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000489125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.000525417">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000527541">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000392833">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000194709">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.000190792">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.000212458">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.00147125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should return a valid name for a simple function" time="0.000183875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should prepend the server name" time="0.0001035">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should replace invalid characters with underscores" time="0.000092416">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should truncate long names" time="0.000104542">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with only invalid characters" time="0.000085334">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are already valid" time="0.000080084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with leading/trailing invalid characters" time="0.000082542">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000119541">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000099125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are longer than 64 characters" time="0.000098084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.000092583">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000124459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000211125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.000219292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000152708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.000094459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.001175625">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-08-12T09:09:22.281Z" hostname="63accec1df8b" tests="12" failures="0" errors="0" skipped="0" time="0.017358834">
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.004883375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.00060125">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000665042">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.002548">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000368083">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.002430542">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000305542">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000185084">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000205666">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000557625">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000823">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000522959">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-08-12T09:09:22.284Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.019435375">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.001096208">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000164208">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000550333">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001144958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.000156667">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000144334">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000151083">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000127833">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000164625">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.013531667">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/AGENTS.md: Error: Disk full
    at [90m/agents/packages/core/[39msrc/tools/memoryTool.test.ts:170:49
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000407917">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.0003335">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000227042">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000342791">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-08-12T09:09:22.288Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.011262959">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.004491875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.000527959">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.0006425">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.000545667">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.000447125">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.001324834">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.000496959">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.000631541">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.00113925">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000156584">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000062791">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-08-12T09:09:22.290Z" hostname="63accec1df8b" tests="15" failures="4" errors="0" skipped="0" time="0.049191708">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.022006709">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.001206458">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.002302875">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001124917">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.00106175">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.002506791">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.001140375">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.00039575">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.000233708">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.001071042">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.009345167">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:165:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.001342042">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:185:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.002192333">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:209:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.001271458">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:234:18
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.001121125">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-08-12T09:09:22.295Z" hostname="63accec1df8b" tests="22" failures="12" errors="0" skipped="0" time="0.121613042">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.022050041">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.002348417">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.001875583">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.0019145">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.002604958">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.001895791">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.002018875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.0020215">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.003042875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.018249625">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:198:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.005755417">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:212:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.004704208">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:236:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.00410175">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:260:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.004779375">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.00509">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:287:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.003820791">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:303:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.005666792">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:331:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.00965725">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:353:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.005395625">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:370:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.005195083">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:389:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.003513875">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:403:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.004981">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:419:22
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-08-12T09:09:22.305Z" hostname="63accec1df8b" tests="36" failures="0" errors="0" skipped="0" time="0.046223292">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.00108775">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000169542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.00009125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000082208">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.000056167">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.000091417">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000056417">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.000062666">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000053458">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.00007175">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000065292">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000071667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.000071625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000069709">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.000056667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.000069792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.000116667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.000061042">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.000086792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.000072333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.000054542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.000072583">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.000069833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.00007225">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.000069833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should be case-sensitive in its matching" time="0.00006975">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.000071167">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.000057917">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with command substitution using backticks" time="0.000053542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000058792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000053167">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000073125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not let the summarizer override the return display" time="0.029262375">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not call summarizer if disabled in config" time="0.004450542">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should pass token budget to summarizer" time="0.004936583">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should use default token budget if not specified" time="0.003331">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-08-12T09:09:22.315Z" hostname="63accec1df8b" tests="18" failures="0" errors="0" skipped="0" time="0.039823625">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.024945125">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.006822792">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.000751709">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.001270625">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should sanitize tool parameters during discovery from command" time="0.001991959">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.001059958">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.000632125">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000091208">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.000062709">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.0000515">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.000056292">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000079583">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove unsupported format from a simple string property" time="0.00024525">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should NOT remove supported format values" time="0.00010075">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle arrays of objects" time="0.000087">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle schemas with no properties to sanitize" time="0.00007075">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should not crash on an empty or undefined schema" time="0.000394292">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas with cycles" time="0.000151208">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-08-12T09:09:22.319Z" hostname="63accec1df8b" tests="4" failures="0" errors="0" skipped="0" time="0.02070675">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.018134209">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.000525917">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000122625">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.001134209">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-08-12T09:09:22.320Z" hostname="63accec1df8b" tests="21" failures="0" errors="0" skipped="0" time="0.050397667">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.018940292">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.002391916">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.0010405">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.001160208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.001496125">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.001198625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.00077525">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.001166709">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.001034375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.001557">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.002189417">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.001457625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.002044333">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.001040416">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.002525">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.002336208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.00179775">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.002003166">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.001192167">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001131292">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.000991666">
        </testcase>
    </testsuite>
</testsuites>
