<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="866" failures="66" errors="0" time="463.056409674">
    <testsuite name="src/index.test.ts" timestamp="2025-08-13T01:47:33.591Z" hostname="dadcaeef10d0" tests="1" failures="0" errors="0" skipped="0" time="0.001314">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.000673417">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-08-13T01:47:33.592Z" hostname="dadcaeef10d0" tests="11" failures="0" errors="0" skipped="0" time="0.00308525">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001238666">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000166292">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000094792">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000071458">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000074125">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.00008725">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000074791">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000089709">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000242875">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.0000985">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000060792">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-08-13T01:47:33.595Z" hostname="dadcaeef10d0" tests="7" failures="0" errors="0" skipped="0" time="0.032405792">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.007589625">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.001877791">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.019215583">
            <system-out>
Loaded cached credentials.

            </system-out>
            <system-err>
Error retrieving user info: TypeError: Cannot read properties of undefined (reading &apos;filter&apos;)
    at cacheGoogleAccount [90m(/agents/packages/core/[39msrc/utils/user_account.ts:52:31[90m)[39m
    at fetchAndCacheUserInfo [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:385:7[90m)[39m
    at Module.getOauthClient [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:91:9[90m)[39m
    at [90m/agents/packages/core/[39msrc/code_assist/oauth2.test.ts:283:7
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.000701">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.00050825">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.000583459">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.001134">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-08-13T01:47:33.600Z" hostname="dadcaeef10d0" tests="7" failures="0" errors="0" skipped="0" time="0.009351958">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.001767917">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.0022715">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.000961375">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.00078675">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.000724541">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.000751917">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.001350917">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-08-13T01:47:33.601Z" hostname="dadcaeef10d0" tests="3" failures="0" errors="0" skipped="0" time="0.003990708">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should use GOOGLE_CLOUD_PROJECT when set" time="0.002265583">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should treat empty GOOGLE_CLOUD_PROJECT as undefined and use project from server" time="0.000337416">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.000666667">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-08-13T01:47:33.602Z" hostname="dadcaeef10d0" tests="23" failures="0" errors="0" skipped="0" time="0.053389917">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.023375708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.016081292">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.001902833">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.00058175">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.000479625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000665125">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000535167">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.000602125">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000686">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000553667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000598375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000451375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000445292">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.00039925">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000793708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000652792">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000450625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000595">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.00061625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.000418583">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000405667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should update memory and file count on successful refresh" time="0.000690541">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should propagate errors from loadServerHierarchicalMemory" time="0.000474625">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-08-13T01:47:33.608Z" hostname="dadcaeef10d0" tests="10" failures="0" errors="0" skipped="0" time="0.029388875">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.02156875">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.000721375">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.00074525">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.000667792">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000698417">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000357958">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.00033725">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000361375">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000400084">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.001379875">
        </testcase>
    </testsuite>
    <testsuite name="src/intelligent-fs/intelligent-filesystem.test.ts" timestamp="2025-08-13T01:47:33.610Z" hostname="dadcaeef10d0" tests="25" failures="23" errors="0" skipped="0" time="460.472870503">
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; TypeScriptファイルを読み取り、シンボル情報を抽出できる" time="20.038296968">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049192570&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Pythonファイルを読み取り、シンボル情報を抽出できる" time="20.029163343">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049212609&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Javaファイルを読み取り、シンボル情報を抽出できる" time="20.020716842">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049232638&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Goファイルを読み取り、シンボル情報を抽出できる" time="20.031951843">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049252659&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 基本的なファイル操作 &gt; Rustファイルを読み取り、シンボル情報を抽出できる" time="20.020044259">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049272690&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; セマンティック編集 &gt; シンボル単位での編集ができる" time="20.012699134">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049292711&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; セマンティック編集 &gt; 参照の自動更新ができる" time="20.021900218">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049312724&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; コード品質を分析できる" time="20.01922855">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049332745&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; バグを予測できる" time="20.011797217">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049352765&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; アーキテクチャを分析できる" time="20.012899426">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049372777&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; コード生成ができる" time="20.022216676">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049392789&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; AI最適化エンジン &gt; リファクタリング提案ができる" time="20.013495426">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049412812&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; コードパターンを学習できる" time="20.018199885">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049432825&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; エラーパターンを記録し学習できる" time="20.018007801">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049452843&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; セッション管理ができる" time="20.002557258">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049472861&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; メモリ統合システム &gt; 改善提案を生成できる" time="20.023933718">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049492864&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; パフォーマンスとキャッシング &gt; キャッシュが正しく動作する" time="20.024810051">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049512888&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; パフォーマンスとキャッシング &gt; 大規模プロジェクトのインデックスが作成できる" time="20.017770843">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049532913&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 存在しないファイルのエラーを適切に処理する" time="20.023596468">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049552931&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 権限のないパスへのアクセスをブロックする" time="20.032513801">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049572954&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 大きすぎるファイルを拒否する" time="20.016092842">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049592987&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; エラーハンドリング &gt; 不正な拡張子のファイルを拒否する" time="20.013956801">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049613003&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 統合テスト &gt; 統合シナリオ &gt; 完全なワークフローを実行できる" time="20.018461093">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/tmp/intelligent-fs-test-1755049633017&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

✓ javascript WASM language loaded

✓ typescript WASM language loaded

✓ python WASM language loaded

✓ java WASM language loaded

✓ go WASM language loaded

✓ rust WASM language loaded

✓ cpp WASM language loaded

✓ csharp WASM language loaded

✓ ruby WASM language loaded
WebAssembly Tree-sitter initialized: 9 languages loaded, 0 failed

            </system-out>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:21:3
            </failure>
            <failure message="Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;." type="Error">
Error: Hook timed out in 10000ms.
If this is a long-running hook, pass a timeout value as the last argument or configure it globally with &quot;hookTimeout&quot;.
 ❯ src/intelligent-fs/intelligent-filesystem.test.ts:44:3
            </failure>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 単体テスト &gt; セキュリティチェック &gt; パストラバーサル攻撃を防ぐ" time="0.0045485">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/safe/path&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

            </system-out>
        </testcase>
        <testcase classname="src/intelligent-fs/intelligent-filesystem.test.ts" name="IntelligentFileSystem 単体テスト &gt; ファイルタイプ判定 &gt; 正しくファイルタイプを判定する" time="0.001576">
            <system-out>
IntelligentFileSystem initialized {
  projectPath: [32m&apos;/&apos;[39m,
  excludeDirectories: [
    [32m&apos;.git&apos;[39m,        [32m&apos;node_modules&apos;[39m,
    [32m&apos;dist&apos;[39m,        [32m&apos;build&apos;[39m,
    [32m&apos;.next&apos;[39m,       [32m&apos;.cache&apos;[39m,
    [32m&apos;bundle&apos;[39m,      [32m&apos;bundles&apos;[39m,
    [32m&apos;bin&apos;[39m,         [32m&apos;obj&apos;[39m,
    [32m&apos;target&apos;[39m,      [32m&apos;out&apos;[39m,
    [32m&apos;__pycache__&apos;[39m, [32m&apos;.pytest_cache&apos;[39m,
    [32m&apos;venv&apos;[39m,        [32m&apos;.venv&apos;[39m,
    [32m&apos;env&apos;[39m,         [32m&apos;vendor&apos;[39m,
    [32m&apos;Pods&apos;[39m,        [32m&apos;.gradle&apos;[39m,
    [32m&apos;Library&apos;[39m,     [32m&apos;Temp&apos;[39m,
    [32m&apos;Logs&apos;[39m,        [32m&apos;coverage&apos;[39m,
    [32m&apos;.nyc_output&apos;[39m, [32m&apos;tmp&apos;[39m,
    [32m&apos;temp&apos;[39m,        [32m&apos;.tmp&apos;[39m
  ],
  excludePatterns: []
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-08-13T01:47:33.662Z" hostname="dadcaeef10d0" tests="31" failures="7" errors="0" skipped="0" time="0.145662791">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.001403292">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000112666">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000113291">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.000048083">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.00004275">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.000040625">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.000053208">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.031982917">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.001015292">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.001266166">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.0013425">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.000789042">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.000675083">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.000692083">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.000837792">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.028917833">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -10,11 +10,10 @@[90m
[2m          Symbol(kReason): undefined,[22m
[2m          Symbol(kComposite): false,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[2m        &quot;temperature&quot;: 0.5,[22m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ]

Received: 

  1st spy call:

@@ -10,11 +10,10 @@
          Symbol(kReason): undefined,
          Symbol(kComposite): false,
        },
        &quot;systemInstruction&quot;: undefined,
        &quot;temperature&quot;: 0.5,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:345:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.006838416">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
            <failure message="expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -13,12 +13,10 @@[90m
[2m        &quot;responseMimeType&quot;: &quot;application/json&quot;,[22m
[2m        &quot;responseSchema&quot;: {[22m
[2m          &quot;type&quot;: &quot;string&quot;,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[32m-       &quot;temperature&quot;: 0,[90m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ { model: &apos;test-model&apos;, …(2) } ]

Received: 

  1st spy call:

@@ -13,12 +13,10 @@
        &quot;responseMimeType&quot;: &quot;application/json&quot;,
        &quot;responseSchema&quot;: {
          &quot;type&quot;: &quot;string&quot;,
        },
        &quot;systemInstruction&quot;: undefined,
-       &quot;temperature&quot;: 0,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:373:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0.007116375">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
            <failure message="expected &quot;spy&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -15,11 +15,10 @@[90m
[2m          &quot;type&quot;: &quot;string&quot;,[22m
[2m        },[22m
[2m        &quot;systemInstruction&quot;: undefined,[22m
[2m        &quot;temperature&quot;: 0.9,[22m
[2m        &quot;topK&quot;: 20,[22m
[32m-       &quot;topP&quot;: 1,[90m
[2m      },[22m
[2m      &quot;contents&quot;: [[22m
[2m        {[22m
[2m          &quot;parts&quot;: [[22m
[2m            {[22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st spy call:

@@ -15,11 +15,10 @@
          &quot;type&quot;: &quot;string&quot;,
        },
        &quot;systemInstruction&quot;: undefined,
        &quot;temperature&quot;: 0.9,
        &quot;topK&quot;: 20,
-       &quot;topP&quot;: 1,
      },
      &quot;contents&quot;: [
        {
          &quot;parts&quot;: [
            {


Number of calls: 1

 ❯ src/core/client.test.ts:408:37
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.009017">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.002255625">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.001432917">
            <system-out>
✓ SQLite memory client initialized: :memory:

[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 699/1000 (70%)
[Compression Debug] Remaining: 301 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.004920792">
            <system-out>
✓ SQLite memory client initialized: :memory:

[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 700/1000 (70%)
[Compression Debug] Remaining: 300 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/core/client.test.ts:537:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.001241709">
            <system-out>
✓ SQLite memory client initialized: :memory:

[Compression Debug] Model: test-model, Token Limit: 1000
[Compression Debug] Current Usage: 700/1000 (70%)
[Compression Debug] Remaining: 300 tokens
[Compression Debug] Compression Threshold: 950 (95%)
[Compression Debug] Force flag: false, Tool threshold: false
[Compression Debug] Skipping compression: usage 70% is below threshold 95%

            </system-out>
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/core/client.test.ts:589:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.014102416">
            <system-out>
✓ SQLite memory client initialized: :memory:

[Compression Debug] Model: test-model, Token Limit: undefined
[Compression Debug] Current Usage: 10/undefined (NaN%)
[Compression Debug] Remaining: NaN tokens
[Compression Debug] Compression Threshold: NaN (95%)
[Compression Debug] Force flag: true, Tool threshold: false
[Compression Debug] Starting compression...

⏳ 圧縮処理を開始しています...
📊 ステップ1/4: トークン数を計算中...
📝 ステップ2/4: 履歴を分析中... (圧縮対象: 0件, 保持: 1件)

[Compression] Saved compression event to Memory API
🤖 ステップ3/4: サマリーを生成中...

💾 ステップ4/4: 新しいセッションを作成中...

Stored project memory: compression_summary_session-1755049194905-ec07087f = {&quot;sessionId&quot;:&quot;session-1755049194905-ec07087f&quot;,&quot;parentSessionId&quot;:&quot;session-1755049194900-00b8460c&quot;,&quot;compressedFrom&quot;:10,&quot;timestamp&quot;:&quot;2025-08-13T01:39:54.909Z&quot;}

[Compression] Saved compression summary to Memory API

[UiTelemetry] Token count reset after compression: 0 -&gt; 0
[Compression Debug] Compression complete: 10 -&gt; 5 tokens
[Compression Debug] Reduction: 50%

✅ 圧縮処理が完了しました！
📉 トークン数: 10 → 5 (50%削減)

            </system-out>
            <system-err>
Unknown memory key: compression_summary_session-1755049194905-ec07087f

            </system-err>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.001966166">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.002578709">
            <system-out>
✓ SQLite memory client initialized: :memory:

checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.001067583">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.001538958">
            <system-out>
✓ SQLite memory client initialized: :memory:

Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.001341958">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.013260916">
            <system-out>
✓ SQLite memory client initialized: :memory:

[Compression Debug] Model: test-model-changed-1, Token Limit: undefined
[Compression Debug] Current Usage: 100000/undefined (NaN%)
[Compression Debug] Remaining: NaN tokens
[Compression Debug] Compression Threshold: NaN (95%)
[Compression Debug] Force flag: true, Tool threshold: false
[Compression Debug] Starting compression...

⏳ 圧縮処理を開始しています...
📊 ステップ1/4: トークン数を計算中...
📝 ステップ2/4: 履歴を分析中... (圧縮対象: 2件, 保持: 0件)

[Compression] Saved compression event to Memory API
🤖 ステップ3/4: サマリーを生成中...

💾 ステップ4/4: 新しいセッションを作成中...

Stored project memory: compression_summary_session-1755049194927-b1f506e7 = {&quot;summary&quot;:&quot;Summary&quot;,&quot;sessionId&quot;:&quot;session-1755049194927-b1f506e7&quot;,&quot;parentSessionId&quot;:&quot;session-1755049194905-ec07087f&quot;,&quot;compressedFrom&quot;:100000,&quot;timestamp&quot;:&quot;2025-08-13T01:39:54.931Z&quot;}

[Compression] Saved compression summary to Memory API

[UiTelemetry] Token count reset after compression: 0 -&gt; 0
[Compression Debug] Compression complete: 100000 -&gt; 5000 tokens
[Compression Debug] Reduction: 95%

✅ 圧縮処理が完了しました！
📉 トークン数: 100000 → 5000 (95%削減)

            </system-out>
            <system-err>
Unknown memory key: compression_summary_session-1755049194927-b1f506e7

            </system-err>
            <failure message="expected 2nd &quot;spy&quot; call to have been called with [ { …(2) } ]" type="AssertionError">
AssertionError: expected 2nd &quot;spy&quot; call to have been called with [ { …(2) } ]

- Expected
+ Received

  [
    {
      &quot;contents&quot;: Any&lt;Array&gt;,
-     &quot;model&quot;: &quot;test-model-changed-2&quot;,
+     &quot;model&quot;: &quot;test-model-changed-1&quot;,
    },
  ]

 ❯ src/core/client.test.ts:988:31
            </failure>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.005289041">
            <system-out>
✓ SQLite memory client initialized: :memory:

            </system-out>
            <failure message="expected null to be &apos;gemini-2.5-flash&apos; // Object.is equality" type="AssertionError">
AssertionError: expected null to be &apos;gemini-2.5-flash&apos; // Object.is equality

- Expected: 
&quot;gemini-2.5-flash&quot;

+ Received: 
null

 ❯ src/core/client.test.ts:1016:22
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-08-13T01:47:33.681Z" hostname="dadcaeef10d0" tests="7" failures="5" errors="0" skipped="0" time="0.010005375">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.0010295">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.001032666">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.005588709">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:62:14
 ❯ src/core/contentGenerator.test.ts:88:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.00051475">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:62:14
 ❯ src/core/contentGenerator.test.ts:98:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000413166">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:62:14
 ❯ src/core/contentGenerator.test.ts:108:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.000325958">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:62:14
 ❯ src/core/contentGenerator.test.ts:119:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.00031475">
            <failure message="config.getDebugMode is not a function" type="TypeError">
TypeError: config.getDebugMode is not a function
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:62:14
 ❯ src/core/contentGenerator.test.ts:131:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-08-13T01:47:33.684Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.008103792">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.002783875">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.003789125">
            <system-out>
[DEBUG] Tool execution completed for mockModifiableTool (1): { toolResult: [32m&apos;Tool executed&apos;[39m, returnDisplay: [32m&apos;Tool executed&apos;[39m }
[DEBUG] Function response created for mockModifiableTool (1): {
  functionResponse: {
    id: [32m&apos;1&apos;[39m,
    name: [32m&apos;mockModifiableTool&apos;[39m,
    response: { output: [32m&apos;Tool executed&apos;[39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000113125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.00007025">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.00005925">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000077375">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000086">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000073584">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000061958">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000059417">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000050292">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000055125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000053458">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-08-13T01:47:33.688Z" hostname="dadcaeef10d0" tests="21" failures="0" errors="0" skipped="0" time="0.010033917">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.003437041">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000464042">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000348583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.000273417">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000240208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000171625">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.00019425">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000275375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.000262667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.0002535">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.000322208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000273458">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.000322125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.000276459">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000380125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000274125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.00028875">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.000292667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.000272667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000239375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.00024375">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-08-13T01:47:33.693Z" hostname="dadcaeef10d0" tests="12" failures="0" errors="0" skipped="0" time="0.002023042">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000780375">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000079875">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.00005">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.00005675">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000043209">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.00004325">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000044875">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.0000435">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.00004325">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000043541">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000041708">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000041208">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-08-13T01:47:33.695Z" hostname="dadcaeef10d0" tests="22" failures="0" errors="0" skipped="0" time="0.084543291">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.007298375">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.002959417">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.00280725">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.00239575">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.004319708">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.002539125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.003278709">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.003431458">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.002177334">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.005163">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.002302042">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.005860292">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.002114125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.001601583">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.002205">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002288">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.002553">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.015939292">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1246:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.004499">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1246:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.002763458">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.002352375">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.002404084">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-08-13T01:47:33.701Z" hostname="dadcaeef10d0" tests="5" failures="0" errors="0" skipped="0" time="0.005742334">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.003330041">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.000392583">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.00035275">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.000687208">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000258833">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-08-13T01:47:33.703Z" hostname="dadcaeef10d0" tests="9" failures="9" errors="0" skipped="0" time="0.026295625">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.01599225">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:36:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.001584375">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:44:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000764041">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:52:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000986417">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:63:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000986167">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:72:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000819583">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:81:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000794291">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:90:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.002857292">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:98:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000720042">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:106:20
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-08-13T01:47:33.709Z" hostname="dadcaeef10d0" tests="9" failures="0" errors="0" skipped="0" time="0.004028292">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.001801416">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.000223291">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.00028775">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.000152625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000137542">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.000192292">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.000158417">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.000223125">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.000166">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-08-13T01:47:33.711Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.006882167">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.001328792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.0005215">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000139834">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000285916">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000326959">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.000879375">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.000368333">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000163708">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000120666">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.001121542">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.0003725">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.00024">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000121208">
        </testcase>
    </testsuite>
    <testsuite name="src/services/ideContext.test.ts" timestamp="2025-08-13T01:47:33.714Z" hostname="dadcaeef10d0" tests="8" failures="0" errors="0" skipped="0" time="0.003761709">
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should return undefined initially for active file context" time="0.000771333">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should set and retrieve the active file context" time="0.000367458">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should update the active file context when called multiple times" time="0.000070542">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should handle empty string for file path" time="0.000055083">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should notify subscribers when active file context changes" time="0.001437958">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should stop notifying a subscriber after unsubscribe" time="0.000179375">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should allow the cursor to be optional" time="0.000059459">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should clear the active file context" time="0.000075792">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-08-13T01:47:33.716Z" hostname="dadcaeef10d0" tests="20" failures="0" errors="0" skipped="0" time="0.005581959">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.001354">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.00037075">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.0001095">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.000187">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.000173083">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for fewer than CONTENT_LOOP_THRESHOLD identical content strings" time="0.000340334">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop on the CONTENT_LOOP_THRESHOLD-th identical content string" time="0.000087416">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for different content strings" time="0.000296166">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not check for loops when content has no sentence-ending punctuation" time="0.000071875">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not treat function calls or method calls as sentence endings" time="0.000667625">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should correctly identify actual sentence endings and trigger loop detection" time="0.000465416">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle content with mixed punctuation" time="0.000072958">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle empty sentences after trimming" time="0.000072875">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should require at least two sentences for loop detection" time="0.000151875">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should cache sentence extraction and only re-extract when content grows significantly" time="0.000076375">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should re-extract sentences when content grows by more than 100 characters" time="0.000054">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should use indexOf for efficient counting instead of regex" time="0.000060792">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.000047708">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.00006825">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.000060375">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-08-13T01:47:33.720Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.030086916">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.02390975">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.000509291">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.0002635">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.000732833">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.0003735">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000285708">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000208416">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.000817083">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.000666584">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.00043625">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000331417">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.000346">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000342667">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-08-13T01:47:33.724Z" hostname="dadcaeef10d0" tests="8" failures="0" errors="0" skipped="0" time="0.023780542">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.002697625">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.002233375">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.002212292">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.009468208">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.001934875">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.001471917">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.001476166">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.001443625">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-08-13T01:47:33.726Z" hostname="dadcaeef10d0" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/telemetry/telemetry.test.ts" name="src/telemetry/telemetry.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;ACCEPT&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;ACCEPT&apos;)
 ❯ createInitialMetrics src/telemetry/uiTelemetry.ts:94:25
 ❯ UiTelemetryService.&lt;instance_members_initializer&gt; src/telemetry/uiTelemetry.ts:103:30
 ❯ new UiTelemetryService src/telemetry/uiTelemetry.ts:102:8
 ❯ src/telemetry/uiTelemetry.ts:248:35
 ❯ src/telemetry/loggers.ts:37:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-08-13T01:47:33.727Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.004436458">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001213458">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.000740875">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000124417">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000103458">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000123583">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000100792">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000081375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.000463583">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000192791">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000094417">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.00010875">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.000184792">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000172958">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-08-13T01:47:33.730Z" hostname="dadcaeef10d0" tests="29" failures="0" errors="0" skipped="0" time="0.072818791">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.003951167">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.001068292">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000380042">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000316333">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000484333">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.022051125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.0014275">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.00127375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.002309042">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.002850208">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.001596834">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.001603292">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.002024792">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.001628458">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.001290875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.002504375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.001782125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.001433208">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.001304292">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.001463375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.00135825">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.01190875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.001583417">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001235375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.0014455">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000532333">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.00029225">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.000269584">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.000302375">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-08-13T01:47:33.737Z" hostname="dadcaeef10d0" tests="27" failures="0" errors="0" skipped="0" time="1.156416042">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.078854917">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.057681083">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.056155959">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.05602575">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.057432375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.056585333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.056592208">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.057201708">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.058273167">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.056945125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.055612334">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.05531725">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.056111125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.056733">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.056831125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.055664458">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.054519041">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.055599209">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.055467542">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.0547505">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.00612325">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000128709">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000080958">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000053083">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.00006325">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000458334">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000071709">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-08-13T01:47:33.743Z" hostname="dadcaeef10d0" tests="20" failures="0" errors="0" skipped="0" time="0.112564417">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.020847417">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.003263834">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.003176334">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.003309542">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.003200209">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.004014375">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.00277775">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.014205333">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.00750025">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.006234834">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.006347708">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.00689025">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.008155292">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.007066041">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.003134875">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.002342708">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.002273542">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.002330792">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.002109084">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.002396208">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-08-13T01:47:33.749Z" hostname="dadcaeef10d0" tests="26" failures="0" errors="0" skipped="0" time="0.0092785">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should discover tools" time="0.001378083">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000498291">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.000533459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000530917">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000389208">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000190292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.000182916">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.000229333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.001591625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should return a valid name for a simple function" time="0.000195625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should prepend the server name" time="0.000103959">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should replace invalid characters with underscores" time="0.00008775">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should truncate long names" time="0.00010175">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with only invalid characters" time="0.000113459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are already valid" time="0.000084417">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with leading/trailing invalid characters" time="0.000080834">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000098666">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000112125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are longer than 64 characters" time="0.000102042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.000152333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000086083">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000091708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.0001865">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000277375">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.000118084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000922833">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-08-13T01:47:33.755Z" hostname="dadcaeef10d0" tests="12" failures="0" errors="0" skipped="0" time="0.004871459">
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.001371875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.000120833">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.00006675">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.000992375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000088625">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.000673292">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000141709">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.0000795">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000075875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000180542">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000128834">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000140125">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-08-13T01:47:33.758Z" hostname="dadcaeef10d0" tests="14" failures="0" errors="0" skipped="0" time="0.011580583">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.001062667">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000153125">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000478417">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001299833">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.000169167">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000165458">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000128541">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000125958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000106875">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.005891875">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/AGENTS.md: Error: Disk full
    at [90m/agents/packages/core/[39msrc/tools/memoryTool.test.ts:170:49
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000344666">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.000345917">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000221625">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000265542">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-08-13T01:47:33.762Z" hostname="dadcaeef10d0" tests="11" failures="0" errors="0" skipped="0" time="0.011434167">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.004257208">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.000565834">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.000615125">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.000582">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.001921167">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.001120625">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.000409667">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.000613875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.000441458">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000082">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000046458">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-08-13T01:47:33.765Z" hostname="dadcaeef10d0" tests="15" failures="4" errors="0" skipped="0" time="0.040449042">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.021496125">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.001295333">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.000955209">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000831167">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.001064875">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.0015345">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.000857167">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.000397625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.000308084">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.000868917">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.005766375">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:139:19
 ❯ src/tools/read-file.test.ts:165:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.001214667">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:139:19
 ❯ src/tools/read-file.test.ts:185:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.001018042">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:139:19
 ❯ src/tools/read-file.test.ts:209:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.000904959">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:139:19
 ❯ src/tools/read-file.test.ts:234:18
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.001148792">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-08-13T01:47:33.770Z" hostname="dadcaeef10d0" tests="22" failures="12" errors="0" skipped="0" time="0.1109155">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.022398875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.002232333">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.001942583">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.0016265">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.002648833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.001805208">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.001705875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.001936792">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.001915875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.016447541">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:198:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.005734292">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:212:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.006523959">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:236:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.004205458">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:260:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.003298667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.004513042">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:287:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.002995">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:303:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.003785541">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:331:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.005845083">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:353:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.005770333">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:370:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.004520334">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:389:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.003638792">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:403:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.004508666">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:419:22
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-08-13T01:47:33.779Z" hostname="dadcaeef10d0" tests="36" failures="0" errors="0" skipped="0" time="0.044164375">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.001034792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000235833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.00012325">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000098333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.00006275">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.00008">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000067875">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.0000685">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000068417">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.000086667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000072709">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000103584">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.00006875">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000076208">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.00006075">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.000078542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.000072458">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.0000605">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.000070334">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.00006825">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.0000555">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.0000735">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.00008675">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.000076333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.00007125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should be case-sensitive in its matching" time="0.000071292">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.00008925">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.000061291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with command substitution using backticks" time="0.000055834">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000062125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000053">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000074125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not let the summarizer override the return display" time="0.025812">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not call summarizer if disabled in config" time="0.004608083">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should pass token budget to summarizer" time="0.005337208">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should use default token budget if not specified" time="0.003978334">
            <system-err>
pgrep: bash: line 1: pgrep: command not found

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-08-13T01:47:33.788Z" hostname="dadcaeef10d0" tests="18" failures="0" errors="0" skipped="0" time="0.036463416">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.0223005">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.006776334">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.000683417">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.00117725">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should sanitize tool parameters during discovery from command" time="0.001583209">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.001048542">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.000602209">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000123709">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.000061417">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.000049916">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.000054917">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000077292">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove unsupported format from a simple string property" time="0.00024975">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should NOT remove supported format values" time="0.000101708">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle arrays of objects" time="0.000065583">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle schemas with no properties to sanitize" time="0.00006875">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should not crash on an empty or undefined schema" time="0.000424916">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas with cycles" time="0.000147917">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-08-13T01:47:33.792Z" hostname="dadcaeef10d0" tests="4" failures="0" errors="0" skipped="0" time="0.020124042">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.017579959">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.000557875">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000158334">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.001085833">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-08-13T01:47:33.793Z" hostname="dadcaeef10d0" tests="21" failures="0" errors="0" skipped="0" time="0.043032">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.019148625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.0009875">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000753958">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.000897625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.00169275">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.000820375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.000782292">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.000906209">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.000776125">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.001070166">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.001954542">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.001143917">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.000841708">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.0007065">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.001365209">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.002413041">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.0017395">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.001685375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.000811709">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.000788584">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.000836">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-08-13T01:47:33.798Z" hostname="dadcaeef10d0" tests="5" failures="0" errors="0" skipped="0" time="0.006091959">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.00194425">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.000473625">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore specified directories" time="0.000513125">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.000518375">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect .gitignore files" time="0.001926291">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-08-13T01:47:33.799Z" hostname="dadcaeef10d0" tests="40" failures="0" errors="0" skipped="0" time="0.013713625">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.000780167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.000072791">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.000049417">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.000042875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000052584">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000049291">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000038209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000048459">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.000197625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.000040666">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000048208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.00003975">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.0000485">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.00005875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.000035083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.00004875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.000035792">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.000036125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.000060334">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000047416">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001207875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000470042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.000510209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000421875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.000541875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.000404125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.000394958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.000526792">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000580166">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000525042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.000450958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.001498208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.0004735">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.000443416">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.000516709">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000480625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000399958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.0003485">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000344">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.000322458">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-08-13T01:47:33.807Z" hostname="dadcaeef10d0" tests="83" failures="0" errors="0" skipped="0" time="0.013110292">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.001869">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.000123708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000152541">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000078958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.00010425">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.000059125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000090167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.000055917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000106792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000052958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000086833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.000064625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000089542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.000056042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000930875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.000076791">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.000101625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000057375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.000090958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000051625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.000081917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.000049167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000078625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.000066791">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000176667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.00005425">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.000084125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.000059709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.000171666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.00007425">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000053">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000049334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.000047">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000047834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000045958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000056583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000052417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.0000515">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000077667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000055833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000061167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.0008475">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.000773625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000182834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.0001865">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000130917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.00011175">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.0001535">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.00011325">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000113334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000175916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.00011">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000102584">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000164583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000145042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000119">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000236458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000132208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000095708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000091042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.00016975">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.000085958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000062916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000065833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000075458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000071833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000065792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000058666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000058">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000053916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000051958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000053">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000053584">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.00005175">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.00005125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000075209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000060125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.00006">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.00052475">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000130209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000088458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000074417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.0000715">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-08-13T01:47:33.825Z" hostname="dadcaeef10d0" tests="6" failures="5" errors="0" skipped="0" time="0.017125167">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.012685041">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;An error occurred. Full report available at: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;An error occurred. Report saved: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;An error occurred. Full report available at: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;An error occurred. Report saved: /tmp/agents-client-error-test-type-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:62:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.000571417">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Another error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;Another error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;Another error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;Another error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:86:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.000451708">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;String error occurred. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;String error occurred. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;String error occurred. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;String error occurred. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:110:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.000925208">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.000723792">
            <failure message="expected &quot;error&quot; to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Failed operation with BigInt. Could not stringify report content (likely due to context):&quot;,[90m
[32m-   TypeError {[90m
[32m-     &quot;message&quot;: &quot;Do not know how to serialize a BigInt&quot;,[90m
[32m-   },[90m
[31m+   &quot;Failed operation with BigInt. Report saved: /tmp/agents-client-error-bigint-fail-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ …(2) ]

Received: 

  1st error call:

  [
-   &quot;Failed operation with BigInt. Could not stringify report content (likely due to context):&quot;,
-   TypeError {
-     &quot;message&quot;: &quot;Do not know how to serialize a BigInt&quot;,
-   },
+   &quot;Failed operation with BigInt. Report saved: /tmp/agents-client-error-bigint-fail-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:170:29
            </failure>
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.00098">
            <failure message="expected &quot;error&quot; to be called with arguments: [ Array(1) ][90m

Received: 

[1m  1st error call:

[22m[2m  [[22m
[32m-   &quot;Simple error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[31m+   &quot;Simple error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;error&quot; to be called with arguments: [ Array(1) ]

Received: 

  1st error call:

  [
-   &quot;Simple error. Full report available at: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
+   &quot;Simple error. Report saved: /tmp/agents-client-error-general-2025-01-01T00-00-00-000Z.json&quot;,
  ]


Number of calls: 1

 ❯ src/utils/errorReporting.test.ts:215:29
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-08-13T01:47:33.828Z" hostname="dadcaeef10d0" tests="36" failures="0" errors="0" skipped="0" time="0.02996525">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001979542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000327916">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.00033575">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000302208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.000275917">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000451583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000477041">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.00047975">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000466042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.001181542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000356417">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000289042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.000357708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000424875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000401375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000332709">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000310834">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000283042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000283708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000268291">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.00027925">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.000481709">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.000405583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.00115375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000358875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.000701334">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.000505584">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.001194833">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.000839292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.000751708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.000548583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000464709">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.001376917">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.000983625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.001167583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.008042541">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-08-13T01:47:33.836Z" hostname="dadcaeef10d0" tests="4" failures="0" errors="0" skipped="0" time="0.180339083">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.02182875">
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.018596">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:30
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.1383375">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.000723583">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-08-13T01:47:33.838Z" hostname="dadcaeef10d0" tests="36" failures="0" errors="0" skipped="0" time="0.004044">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.000711167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.000089084">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000095666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.000114875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.000051625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.000060458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.000046583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000063208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000055167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.000043792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000045042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000041792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.0000625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000041458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000042958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000396709">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000078958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000065292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000048917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000058708">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000065875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000062417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.000057958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000042916">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000115541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000045459">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000069333">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000042625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000061917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000053833">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000054584">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000045167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000057875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000050208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000051417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.000043291">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-08-13T01:47:33.846Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.015583">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.007864417">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000396958">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.000562">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000636916">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000427209">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.000275625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.000275625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.000220416">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.001465125">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000337542">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.000320791">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.001629334">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000324875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-08-13T01:47:33.849Z" hostname="dadcaeef10d0" tests="15" failures="0" errors="0" skipped="0" time="0.010562667">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.002174459">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.001382875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.000418042">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000293166">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.000289375">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.001777792">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.001772083">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.000244459">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000187542">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000195417">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.00018975">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.00017825">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.0002555">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.000219459">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.00016075">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-08-13T01:47:33.852Z" hostname="dadcaeef10d0" tests="11" failures="0" errors="0" skipped="0" time="0.009087792">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.001574333">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.001474334">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.0003605">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.000354583">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.000353083">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.00034675">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.000323334">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.000414667">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.000362458">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.002467084">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.000306792">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-08-13T01:47:33.855Z" hostname="dadcaeef10d0" tests="14" failures="0" errors="0" skipped="0" time="0.007251417">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.002064459">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.000326167">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000195917">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.001445917">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.00022575">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.00022125">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000896792">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.00020675">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000153209">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000140708">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000123">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000138333">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000129375">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000116166">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-08-13T01:47:33.858Z" hostname="dadcaeef10d0" tests="10" failures="0" errors="0" skipped="0" time="0.029428">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.003035458">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.002126625">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.001666834">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.001326458">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.001327167">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.002830625">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.005679541">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.001019791">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.008431708">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_AGENTS_FLASH_MODEL" time="0.001192875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-08-13T01:47:33.860Z" hostname="dadcaeef10d0" tests="13" failures="0" errors="0" skipped="0" time="0.027315458">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.002686">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.011997209">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:66:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.004529208">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:82:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000337291">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.00035375">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.000274">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.001566333">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:164:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.001371667">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.000969084">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000436917">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000330333">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.000934208">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.00056325">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-08-13T01:47:33.867Z" hostname="dadcaeef10d0" tests="8" failures="0" errors="0" skipped="0" time="0.001974291">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.000741542">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000079792">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000145917">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000051916">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000049125">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000047292">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.00005525">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000068417">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-08-13T01:47:33.869Z" hostname="dadcaeef10d0" tests="8" failures="0" errors="0" skipped="0" time="0.020605292">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.002660708">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.001273667">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.001419625">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.003023">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.001988708">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.003888417">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.0036215">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.001735375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_account.test.ts" timestamp="2025-08-13T01:47:33.871Z" hostname="dadcaeef10d0" tests="16" failures="0" errors="0" skipped="0" time="0.017725584">
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.003268791">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.002079708">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.002272791">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.002421542">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.000392167">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000170458">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000271584">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.000398333">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.001298875">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001203584">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000282584">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.000275083">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.001556292">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.000369292">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.0002685">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.00025475">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-08-13T01:47:33.874Z" hostname="dadcaeef10d0" tests="1" failures="0" errors="0" skipped="0" time="0.00160925">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.000893875">
        </testcase>
    </testsuite>
</testsuites>
