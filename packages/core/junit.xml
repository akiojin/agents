<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="842" failures="28" errors="0" time="3.20728188">
    <testsuite name="src/index.test.ts" timestamp="2025-08-09T16:14:16.605Z" hostname="3f33f7409819" tests="1" failures="0" errors="0" skipped="0" time="0.001400167">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.000741625">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-08-09T16:14:16.606Z" hostname="3f33f7409819" tests="11" failures="0" errors="0" skipped="0" time="0.002782667">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001119625">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000115791">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000086875">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000078166">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000073292">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.0000775">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000067959">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000088208">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000167291">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000080458">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.00005675">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-08-09T16:14:16.610Z" hostname="3f33f7409819" tests="7" failures="0" errors="0" skipped="0" time="0.032827209">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.007083792">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.002007042">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.018544042">
            <system-out>
Loaded cached credentials.

            </system-out>
            <system-err>
Error retrieving user info: TypeError: Cannot read properties of undefined (reading &apos;filter&apos;)
    at cacheGoogleAccount [90m(/agents/packages/core/[39msrc/utils/user_account.ts:52:31[90m)[39m
    at fetchAndCacheUserInfo [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:385:7[90m)[39m
    at Module.getOauthClient [90m(/agents/packages/core/[39msrc/code_assist/oauth2.ts:91:9[90m)[39m
    at [90m/agents/packages/core/[39msrc/code_assist/oauth2.test.ts:283:7
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.001369041">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.001103375">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.000598375">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.001353542">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-08-09T16:14:16.615Z" hostname="3f33f7409819" tests="7" failures="0" errors="0" skipped="0" time="0.009622959">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.001705667">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.002299333">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.000910042">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.000812667">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.000838458">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.000932042">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.001381334">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-08-09T16:14:16.617Z" hostname="3f33f7409819" tests="3" failures="0" errors="0" skipped="0" time="0.003729041">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should use GOOGLE_CLOUD_PROJECT when set" time="0.0022295">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should treat empty GOOGLE_CLOUD_PROJECT as undefined and use project from server" time="0.000351333">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.0004625">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-08-09T16:14:16.618Z" hostname="3f33f7409819" tests="23" failures="0" errors="0" skipped="0" time="0.0383265">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.023697375">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.002944125">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.001655375">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-flash

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.000546333">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.000579666">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000507916">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000518083">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.000403083">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000527125">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000385584">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000360375">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000353625">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000435708">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.000397375">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000466958">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.00038125">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000402875">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000413042">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000371958">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.00038875">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000375083">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should update memory and file count on successful refresh" time="0.00073375">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshMemory &gt; should propagate errors from loadServerHierarchicalMemory" time="0.000492875">
            <system-out>
[Config] getModel() returning initial model: gemini-pro

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-08-09T16:14:16.633Z" hostname="3f33f7409819" tests="10" failures="0" errors="0" skipped="0" time="0.030003667">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.022043875">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-pro
[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-flash

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.00083075">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-1.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.001013083">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.000721708">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-flash

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000916584">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning initial model: custom-model
[Config] getModel() returning initial model: custom-model

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000480417">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.000450333">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000468208">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-flash

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000773042">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-flash
[Config] getModel() returning from contentGeneratorConfig: gemini-2.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.001386542">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-08-09T16:14:16.641Z" hostname="3f33f7409819" tests="31" failures="0" errors="0" skipped="0" time="0.760665917">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.001298666">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000117375">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.000115667">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.000048875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.000054041">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.000040625">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.000056291">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.604550875">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.006380791">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.00660775">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.005394791">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.00713325">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.006291958">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.008682625">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.005886125">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.006622625">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.006494417">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0.005371125">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.005162708">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.00540625">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.010583792">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.00658275">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.005978416">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.00530975">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.007867917">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.008938417">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.00746825">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.006606917">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.007537625">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.005495083">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.005349833">
            <system-out>
Initializing memory system...

ChromaDB collection &apos;agent_memories&apos; initialized

Memory system initialized successfully

Activated project: default

Memory API initialized

Memory API initialized successfully

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-08-09T16:14:16.662Z" hostname="3f33f7409819" tests="7" failures="3" errors="0" skipped="0" time="0.011702375">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.001058">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.001072166">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.00114525">
            <system-out>
[ContentGenerator] Non-OPENAI model resolved: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.005273333">
            <system-out>
[ContentGenerator] Non-OPENAI model resolved: gemini-pro

            </system-out>
            <failure message="GEMINI_API_KEY is required for Gemini API authentication" type="Error">
Error: GEMINI_API_KEY is required for Gemini API authentication
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:97:13
 ❯ src/core/contentGenerator.test.ts:98:26
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.000353708">
            <system-out>
[ContentGenerator] Non-OPENAI model resolved: gemini-pro

            </system-out>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.001458208">
            <system-out>
[ContentGenerator] Non-OPENAI model resolved: gemini-pro

            </system-out>
            <failure message="expected &apos;AIzaSyCLFUqobxlWeJ5W5k4hpQnKJzbbA-T0r…&apos; to be undefined" type="AssertionError">
AssertionError: expected &apos;AIzaSyCLFUqobxlWeJ5W5k4hpQnKJzbbA-T0r…&apos; to be undefined

- Expected: 
undefined

+ Received: 
&quot;AIzaSyCLFUqobxlWeJ5W5k4hpQnKJzbbA-T0rUE&quot;

 ❯ src/core/contentGenerator.test.ts:124:27
            </failure>
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.000516542">
            <system-out>
[ContentGenerator] Non-OPENAI model resolved: gemini-pro

            </system-out>
            <failure message="GOOGLE_API_KEY or GOOGLE_CLOUD_PROJECT/LOCATION is required for Vertex AI authentication" type="Error">
Error: GOOGLE_API_KEY or GOOGLE_CLOUD_PROJECT/LOCATION is required for Vertex AI authentication
 ❯ Module.createContentGeneratorConfig src/core/contentGenerator.ts:116:13
 ❯ src/core/contentGenerator.test.ts:131:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-08-09T16:14:16.667Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.007004666">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.002643334">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.002802833">
            <system-out>
[DEBUG] Tool execution completed for mockModifiableTool (1): { toolResult: [32m&apos;Tool executed&apos;[39m, returnDisplay: [32m&apos;Tool executed&apos;[39m }
[DEBUG] Function response created for mockModifiableTool (1): {
  functionResponse: {
    id: [32m&apos;1&apos;[39m,
    name: [32m&apos;mockModifiableTool&apos;[39m,
    response: { output: [32m&apos;Tool executed&apos;[39m }
  }
}

            </system-out>
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000104041">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000069792">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.000057">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.0000715">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000065375">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000067291">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000071833">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000056166">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.00005">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000056208">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000056375">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-08-09T16:14:16.670Z" hostname="3f33f7409819" tests="21" failures="0" errors="0" skipped="0" time="0.010628416">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.003367">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.000502125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000265584">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.00028425">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000359458">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000232292">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.000224125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000385833">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.0003395">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.000314333">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.000371667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000405167">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.000357417">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.000271292">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000280209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000242667">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.000367042">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.000314167">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.000277625">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000259875">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000285">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-08-09T16:14:16.675Z" hostname="3f33f7409819" tests="12" failures="0" errors="0" skipped="0" time="0.001979541">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000738125">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.000072">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000051917">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.0000445">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000044708">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000040417">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.0000425">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.000040459">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.000043959">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000041417">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.0000385">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000037458">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-08-09T16:14:16.678Z" hostname="3f33f7409819" tests="22" failures="0" errors="0" skipped="0" time="0.08670075">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.010342291">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.004656333">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.0027415">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.002309625">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.004039792">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.004175334">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.003454917">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.003711166">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.001979125">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.005271709">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.003358458">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.005700792">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.002172417">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.001846875">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.002867708">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.002157791">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.002831625">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.011413833">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1243:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.002602">
            <system-err>
Failed to read or parse checkpoint file /root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1243:14)[39m
    at Logger.loadCheckpoint [90m(/agents/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/agents/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/root/.gemini/tmp/1ec96c64789348e25a1f99c95fcfebda075c3f6bdbf05c29b785a64e4dc8d930/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.003388584">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.001965083">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.002545917">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-08-09T16:14:16.684Z" hostname="3f33f7409819" tests="5" failures="0" errors="0" skipped="0" time="0.004976834">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.003069583">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.000350791">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.000292292">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.000346958">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000287209">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-08-09T16:14:16.685Z" hostname="3f33f7409819" tests="9" failures="9" errors="0" skipped="0" time="0.030307792">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.019249">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:36:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.002883958">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:44:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.001181833">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:52:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.001075542">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:63:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.001064709">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:72:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000993417">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot; 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:81:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000951042">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:90:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.001014125">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:98:20
            </failure>
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.001025042">
            <failure message="Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched" type="Error">
Error: Snapshot `Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo 1` mismatched

- Expected
+ Received

@@ -61,11 +61,11 @@
  - **File Paths:** Always use absolute paths when referring to files with tools like &apos;read_file&apos; or &apos;write_file&apos;. Relative paths are not supported. You must provide an absolute path.
  - **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).
  - **Command Execution:** Use the &apos;run_shell_command&apos; tool for running shell commands, remembering the safety rule to explain modifying commands first.
  - **Background Processes:** Use background processes (via `&amp;`) for commands that are unlikely to stop on their own, e.g. `node server.js &amp;`. If unsure, ask the user.
  - **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction (e.g. `git rebase -i`). Use non-interactive versions of commands (e.g. `npm init -y` instead of `npm init`) when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs until canceled by the user.
- - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `GEMINI.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
+ - **Remembering Facts:** Use the &apos;save_memory&apos; tool to remember specific, *user-related* facts or preferences when the user explicitly asks, or when they state a clear, concise piece of information that would help personalize or streamline *your future interactions with them* (e.g., preferred coding style, common project paths they use, personal tool aliases). This tool is for user-specific information that should persist across sessions. Do *not* use it for general project context or information that belongs in project-specific `AGENTS.md` files. If unsure whether to save something, you can ask the user, &quot;Should I remember that for you?&quot;
  - **Respect User Confirmations:** Most tool calls (also denoted as &apos;function calls&apos;) will first require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt. When a user cancels a function call, assume best intentions from the user and consider inquiring if they prefer any alternative paths forward.

  ## Interaction Details
  - **Help Command:** The user can use &apos;/help&apos; to display help information.
  - **Feedback:** To report a bug or provide feedback, please use the /bug command.

 ❯ src/core/prompts.test.ts:106:20
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-08-09T16:14:16.691Z" hostname="3f33f7409819" tests="9" failures="0" errors="0" skipped="0" time="0.005359042">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.002148166">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.00030125">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.000366584">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.00033025">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000222709">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.000298291">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.000216">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.000281625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.000224208">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-08-09T16:14:16.694Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.005921375">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.00140575">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.000501292">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000129625">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000372333">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000346792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.000897834">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.000342417">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000163459">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000115458">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.000257583">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.0002305">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.000204">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000125667">
        </testcase>
    </testsuite>
    <testsuite name="src/services/ideContext.test.ts" timestamp="2025-08-09T16:14:16.697Z" hostname="3f33f7409819" tests="8" failures="0" errors="0" skipped="0" time="0.003892833">
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should return undefined initially for active file context" time="0.000759084">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should set and retrieve the active file context" time="0.000373125">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should update the active file context when called multiple times" time="0.00006825">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should handle empty string for file path" time="0.000057583">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should notify subscribers when active file context changes" time="0.001456583">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should stop notifying a subscriber after unsubscribe" time="0.000163625">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should allow the cursor to be optional" time="0.000133959">
        </testcase>
        <testcase classname="src/services/ideContext.test.ts" name="ideContext - Active File &gt; should clear the active file context" time="0.000074791">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-08-09T16:14:16.699Z" hostname="3f33f7409819" tests="20" failures="0" errors="0" skipped="0" time="0.005355041">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.001286375">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.00034775">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.000106208">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.000257292">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.000147583">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for fewer than CONTENT_LOOP_THRESHOLD identical content strings" time="0.000321125">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop on the CONTENT_LOOP_THRESHOLD-th identical content string" time="0.000092459">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for different content strings" time="0.000231875">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not check for loops when content has no sentence-ending punctuation" time="0.000121958">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should not treat function calls or method calls as sentence endings" time="0.000591584">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should correctly identify actual sentence endings and trigger loop detection" time="0.000395583">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle content with mixed punctuation" time="0.000065125">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should handle empty sentences after trimming" time="0.000048041">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Sentence Extraction and Punctuation &gt; should require at least two sentences for loop detection" time="0.000129292">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should cache sentence extraction and only re-extract when content grows significantly" time="0.000122667">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should re-extract sentences when content grows by more than 100 characters" time="0.000050333">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Performance Optimizations &gt; should use indexOf for efficient counting instead of regex" time="0.000056958">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.000043167">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.000078375">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.00006275">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-08-09T16:14:16.704Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.030698709">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.024129625">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.00048">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.000350875">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.000685708">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000354041">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000288292">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.00020875">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.000815625">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.000778709">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000353042">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000525125">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.000420542">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.000408958">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-08-09T16:14:16.707Z" hostname="3f33f7409819" tests="8" failures="0" errors="0" skipped="0" time="0.022857208">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.004385708">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.002443625">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.002443167">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.003684667">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.001461958">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.001784791">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.003682875">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.001411667">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-08-09T16:14:16.709Z" hostname="3f33f7409819" tests="2" failures="0" errors="0" skipped="0" time="0.009802458">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.005606959">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.003133708">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-08-09T16:14:16.711Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.005000667">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001310958">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.000819042">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000236375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000117">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000131125">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.0001095">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000088">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.000456167">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000294208">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000096375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.000113417">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.000206875">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000175375">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-08-09T16:14:16.714Z" hostname="3f33f7409819" tests="29" failures="0" errors="0" skipped="0" time="0.051329667">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.001881042">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000356625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000303375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000272834">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000263833">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.01771875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.001329667">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001473041">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.002263459">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.002736791">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.001462709">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.001729042">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.001275292">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.001357709">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.001279375">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.001354666">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.001347625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.00125125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.0011895">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.001353042">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.001219834">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.001214416">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.00131725">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001255625">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.001417">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000668667">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.00037925">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.000306041">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.000317166">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-08-09T16:14:16.721Z" hostname="3f33f7409819" tests="27" failures="0" errors="0" skipped="0" time="1.1647345">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.076854375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.056778917">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.057743833">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.056371958">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.05749">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.057839459">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.06011975">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.056236625">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.057504167">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.055861333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.05584125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.056361834">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.055799167">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.0559905">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.055879959">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.059094375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.056170041">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.055347292">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.057079167">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.056317541">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.006163125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000108791">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.0000755">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000054333">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000064209">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000468875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000075792">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-08-09T16:14:16.727Z" hostname="3f33f7409819" tests="20" failures="0" errors="0" skipped="0" time="0.120547333">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.023869666">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.003254667">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.003408459">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.003065958">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.003241167">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.003838583">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.002990458">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.013830167">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.006354291">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.006445792">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.00693075">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.00664175">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.009961708">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.007644917">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.003235625">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.003936292">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.002391125">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.002219583">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.002446625">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.00382625">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-08-09T16:14:16.734Z" hostname="3f33f7409819" tests="26" failures="0" errors="0" skipped="0" time="0.009203125">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should discover tools" time="0.001347292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.000494708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.000529708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.000534208">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.000366417">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.000271292">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.0001915">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.00016875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.000996042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should return a valid name for a simple function" time="0.000416583">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should prepend the server name" time="0.000181417">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should replace invalid characters with underscores" time="0.000129875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should truncate long names" time="0.000137375">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with only invalid characters" time="0.000128333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are already valid" time="0.000126042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names with leading/trailing invalid characters" time="0.000113834">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 63 characters long" time="0.000137333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are exactly 64 characters long" time="0.000149875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; generateValidName &gt; should handle names that are longer than 64 characters" time="0.000159875">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.0001645">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.000130458">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000434708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.000140458">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.000100333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.00009425">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000694875">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-08-09T16:14:16.741Z" hostname="3f33f7409819" tests="12" failures="0" errors="0" skipped="0" time="0.004881125">
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.001317958">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.0001205">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000060959">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.000962875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000186917">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.000615125">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000143417">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000084875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000079584">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000277084">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000133">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000107208">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-08-09T16:14:16.745Z" hostname="3f33f7409819" tests="14" failures="0" errors="0" skipped="0" time="0.022868209">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.004595041">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.003304292">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.002131208">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001032542">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.000163333">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.00015125">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000202542">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000131875">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000105666">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.006517334">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/AGENTS.md: Error: Disk full
    at [90m/agents/packages/core/[39msrc/tools/memoryTool.test.ts:170:49
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.00036575">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.000352458">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000242958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000291625">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-08-09T16:14:16.749Z" hostname="3f33f7409819" tests="11" failures="0" errors="0" skipped="0" time="0.010455042">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.003893125">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.000543666">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.000476417">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.000604917">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.000872333">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.001347541">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.000519958">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.000684875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.00051375">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000104791">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000051208">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-08-09T16:14:16.752Z" hostname="3f33f7409819" tests="15" failures="4" errors="0" skipped="0" time="0.061119">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.021594292">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.001292458">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.00119225">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001028917">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.000939459">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.001716917">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.001">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.000449041">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.000271791">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.000937125">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.0071045">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:165:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.001153625">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:185:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.009789916">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:209:33
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.007851084">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadFileTool.execute src/tools/read-file.ts:138:19
 ❯ src/tools/read-file.test.ts:234:18
            </failure>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.003604916">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-08-09T16:14:16.757Z" hostname="3f33f7409819" tests="22" failures="12" errors="0" skipped="0" time="0.11885125">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.01962775">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.002182333">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.002114083">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.001948875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.001993666">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.001816416">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.001827042">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.001976375">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.002212958">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.017834834">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:198:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.007029042">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:212:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.009589916">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:236:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.00482175">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:260:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.003653083">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.004084292">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:287:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.003061333">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:303:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.004067167">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:331:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.008624583">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:353:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.005513167">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:370:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.004360416">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:389:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.003877167">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:403:22
            </failure>
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.005067292">
            <failure message="this.config.getFileParserService is not a function" type="TypeError">
TypeError: this.config.getFileParserService is not a function
 ❯ ReadManyFilesTool.execute src/tools/read-many-files.ts:375:21
 ❯ src/tools/read-many-files.test.ts:419:22
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-08-09T16:14:16.766Z" hostname="3f33f7409819" tests="36" failures="0" errors="0" skipped="0" time="0.061848667">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.001036083">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000163333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.00010925">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000094334">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.000065459">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.000087625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000063833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.000081041">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000069042">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.000073708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000068167">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000077333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.000073042">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000169083">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.000060583">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.00007325">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.00006">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.000055708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.000068708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.000063125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.000062583">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.000067917">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.000077541">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.0000725">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.000071542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should be case-sensitive in its matching" time="0.000066291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.000075333">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.000066">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with command substitution using backticks" time="0.000053542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000057959">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000057166">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000071667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not let the summarizer override the return display" time="0.039120584">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should not call summarizer if disabled in config" time="0.006616542">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should pass token budget to summarizer" time="0.006126416">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool Bug Reproduction &gt; should use default token budget if not specified" time="0.00561775">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-08-09T16:14:16.774Z" hostname="3f33f7409819" tests="18" failures="0" errors="0" skipped="0" time="0.037383083">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.022253167">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.006621125">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.000725709">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.001290125">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should sanitize tool parameters during discovery from command" time="0.001677167">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.001431083">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.000968458">
            <system-out>
[Config] getModel() returning initial model: test-model

            </system-out>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000103417">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.000070625">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.000067958">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.00005675">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000083208">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove unsupported format from a simple string property" time="0.00027275">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should NOT remove supported format values" time="0.000106708">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle arrays of objects" time="0.000117416">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle schemas with no properties to sanitize" time="0.000077166">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should not crash on an empty or undefined schema" time="0.000440083">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas with cycles" time="0.000149875">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-08-09T16:14:16.780Z" hostname="3f33f7409819" tests="4" failures="0" errors="0" skipped="0" time="0.019616292">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.017176375">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.000562292">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000130292">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.001035333">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-08-09T16:14:16.781Z" hostname="3f33f7409819" tests="21" failures="0" errors="0" skipped="0" time="0.041721375">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.0194235">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.001108916">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000863042">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.00101975">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.001431208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.000728209">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.00062375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.00086875">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.000894208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.000968292">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.001864791">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.001175167">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.000926042">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.000901666">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.00096275">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.001683041">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.001466459">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.001540416">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.0008275">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.000762708">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.00076425">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-08-09T16:14:16.786Z" hostname="3f33f7409819" tests="5" failures="0" errors="0" skipped="0" time="0.005641917">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.00184175">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.0004965">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore specified directories" time="0.000572583">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.000496042">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect .gitignore files" time="0.001544375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-08-09T16:14:16.787Z" hostname="3f33f7409819" tests="40" failures="0" errors="0" skipped="0" time="0.013468875">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.000798375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.0000745">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.000097042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.000057292">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000063708">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000061167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000043166">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000072458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.000183375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.000045625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000059167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.000039542">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.00005975">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.000159208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.00004175">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.000055125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.000043542">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.000039875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.0000925">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000050875">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001307209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.00050775">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.000476">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000403">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.000479375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.00049925">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.0003965">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.00042375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000612167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000415209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.00041225">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.000868">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.00049475">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.000420959">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.000839208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000449125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000392417">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000330625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000291">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.00028625">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-08-09T16:14:16.795Z" hostname="3f33f7409819" tests="83" failures="0" errors="0" skipped="0" time="0.017122792">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.00209625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.000178291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000191875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000086542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.000157458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.000115209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000111334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.000066959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000136709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000092625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000100875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.000089875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000137417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.000117667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000104959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.000090875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.000124">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000068666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.0001285">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000094625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.000127541">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.00007125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000123458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.000081167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000110125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.000056417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.0001285">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.000090916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.000163209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.000118083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000101541">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000067">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.000104042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000078042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000094958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000093916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000069708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.000085792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000103167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000105125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000122792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.000911709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.000856875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000261333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000277375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000187375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.001325708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000305208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000195667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000163666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000235458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000167458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000356666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.00035375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.000217875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000188417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000283125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000197875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000150375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000141458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000236">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.000143375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000110083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.00008175">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000110166">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000101125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000074458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000089917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000116458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000089375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000136875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.00009175">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000091292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000066708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.0000875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000196334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000127875">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000090208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000115375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000119625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000119375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000086709">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000106875">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-08-09T16:14:16.813Z" hostname="3f33f7409819" tests="6" failures="0" errors="0" skipped="0" time="0.010789375">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.003108875">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.0005145">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.000337834">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.005121125">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.00061925">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.000338333">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-08-09T16:14:16.815Z" hostname="3f33f7409819" tests="36" failures="0" errors="0" skipped="0" time="0.035005084">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001768167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000331833">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.000268083">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000233917">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.000257791">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000271916">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000305667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.000386667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000406375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.000294792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.0003575">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000281125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.000361">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000399125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000286042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.000316042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000292542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000289041">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000276459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000283792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.0003365">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.00083125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.000394208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.0058875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000498459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.00070775">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.001028459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.0030915">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.001398583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.000811375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.00051">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000387625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.001394791">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.000822792">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.001164">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.007126709">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-08-09T16:14:16.823Z" hostname="3f33f7409819" tests="4" failures="0" errors="0" skipped="0" time="0.157002417">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.022587417">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.010726708">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:30
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.122006417">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/agents/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/flashFallback.integration.test.ts:100:51
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runFiles (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3)
    at startTests (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1820:3)
    at file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:117:26
    at withEnv (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:84:3)
    at run (file:///agents/node_modules/[4mvitest[24m/dist/chunks/runBaseTests.9Ij9_de-.js:109:2)
    at runBaseTests (file:///agents/node_modules/[4mvitest[24m/dist/chunks/base.DfmxU-tU.js:32:2) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.000827917">
            <system-out>
[Config] getModel() returning initial model: gemini-2.5-pro

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-08-09T16:14:16.826Z" hostname="3f33f7409819" tests="36" failures="0" errors="0" skipped="0" time="0.004461541">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.0007665">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.000086417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000101834">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.00012325">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.000060417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.0000675">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.00005375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000071167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000064">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.00004675">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000051375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000051209">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000067291">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000042042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000048416">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000414083">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000096875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000065708">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.00004625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000066917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000070375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000066041">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.00013875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000052667">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000083417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000051375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000067791">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.00004525">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000072333">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000070125">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000064958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000047583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000062541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000050625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000051709">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.00005025">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-08-09T16:14:16.834Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.014829875">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.007447375">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000397084">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.000429666">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000391042">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000530917">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.000640625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.000455833">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.00029">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.000957708">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000347959">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.000279375">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.00151225">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000364583">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-08-09T16:14:16.837Z" hostname="3f33f7409819" tests="15" failures="0" errors="0" skipped="0" time="0.011653959">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.002990083">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.001697">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.000550833">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000291">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.000227167">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.000372916">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.000407625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.0003045">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000460042">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000481917">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000649">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000589167">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.001043458">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.00038925">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000236292">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-08-09T16:14:16.840Z" hostname="3f33f7409819" tests="11" failures="0" errors="0" skipped="0" time="0.010454834">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.001538584">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.001646709">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.000357">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.000437042">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.00032775">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.000525875">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.00039725">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.00047275">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.000385792">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.00273025">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.000721916">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-08-09T16:14:16.843Z" hostname="3f33f7409819" tests="14" failures="0" errors="0" skipped="0" time="0.005500959">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.00211475">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.00030175">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.0001625">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000278959">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000208542">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000183458">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000116667">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000156292">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000204792">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000276291">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000288792">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000148875">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000157">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000128666">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-08-09T16:14:16.846Z" hostname="3f33f7409819" tests="10" failures="0" errors="0" skipped="0" time="0.017987625">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.002586083">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.001157917">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.001669958">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.001097584">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.001168583">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.001260917">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.001235167">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.001115083">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.004706208">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_GEMINI_FLASH_MODEL" time="0.001252709">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-08-09T16:14:16.849Z" hostname="3f33f7409819" tests="13" failures="0" errors="0" skipped="0" time="0.022266959">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.002561042">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.009380209">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:66:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.001626292">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:82:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.00037025">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.000423375">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.00030875">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.001482875">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:164:21
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.0017865">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at runRetry [90m(/agents/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.001000792">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.000552792">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.000347083">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.000909083">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.000640625">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:378:36
    at mockCall (file:///agents/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///agents/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/agents/packages/core/[39msrc/utils/retry.ts:92:20[90m)[39m
    at [90m/agents/packages/core/[39msrc/utils/retry.test.ts:389:23
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-08-09T16:14:16.854Z" hostname="3f33f7409819" tests="8" failures="0" errors="0" skipped="0" time="0.001887541">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.00075325">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.000074458">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.000124791">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.000047208">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.000044792">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.000044709">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.000052208">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.000063375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-08-09T16:14:16.855Z" hostname="3f33f7409819" tests="8" failures="0" errors="0" skipped="0" time="0.0142085">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.002462375">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.000986084">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.00123575">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.001885583">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.001133875">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.001133292">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.003297042">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.001286208">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_account.test.ts" timestamp="2025-08-09T16:14:16.858Z" hostname="3f33f7409819" tests="16" failures="0" errors="0" skipped="0" time="0.017219458">
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.003885958">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.001808708">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.003162292">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.002126083">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.000570416">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.000169917">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.000272166">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.00036075">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.001353333">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.001051291">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.000208583">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.000257958">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.000334709">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.0002615">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.000321458">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.000246667">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-08-09T16:14:16.861Z" hostname="3f33f7409819" tests="1" failures="0" errors="0" skipped="0" time="0.001675667">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.000978375">
        </testcase>
    </testsuite>
</testsuites>
