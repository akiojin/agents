<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="757" failures="71" errors="0" time="27.211570096">
    <testsuite name="src/gemini.test.tsx" timestamp="2025-08-12T09:09:11.533Z" hostname="63accec1df8b" tests="1" failures="0" errors="0" skipped="0" time="0.004201667">
        <testcase classname="src/gemini.test.tsx" name="gemini.tsx main function &gt; should call process.exit(1) if settings have errors" time="0.003519459">
        </testcase>
    </testsuite>
    <testsuite name="src/nonInteractiveCli.test.ts" timestamp="2025-08-12T09:09:11.534Z" hostname="63accec1df8b" tests="6" failures="6" errors="0" skipped="0" time="0.008649167">
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should process input and write text output" time="0.005415083">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:85:5
            </failure>
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle a single tool call and respond" time="0.00061975">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:138:5
            </failure>
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle error during tool execution" time="0.00053575">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:198:5
            </failure>
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should exit with error if sendMessageStream throws initially" time="0.000413084">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:222:5
            </failure>
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should not exit if a tool is not found, and should send error back to model" time="0.000436667">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:274:5
            </failure>
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should exit when max session turns are exceeded" time="0.000438084">
            <failure message="Cannot read properties of undefined (reading &apos;file&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;file&apos;)
 ❯ Module.runNonInteractive src/nonInteractiveCli.ts:71:12
 ❯ src/nonInteractiveCli.test.ts:335:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/config/auth.test.ts" timestamp="2025-08-12T09:09:11.539Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.004429458">
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return null for LOGIN_WITH_GOOGLE" time="0.001200125">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return null for CLOUD_SHELL" time="0.000229584">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_GEMINI &gt; should return null if GEMINI_API_KEY is set" time="0.000200292">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_GEMINI &gt; should return an error message if GEMINI_API_KEY is not set" time="0.0002115">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return null if GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION are set" time="0.000232709">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return null if GOOGLE_API_KEY is set" time="0.000384167">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return an error message if no required environment variables are set" time="0.000201916">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return null if OPENAI_API_KEY and OPENAI_BASE_URL are set for external API" time="0.00020525">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return null if only base URL is set for local LLM" time="0.000149667">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return null if LOCAL_LLM_BASE_URL is set for local LLM" time="0.00014575">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return null if LOCAL_LLM_BASE_URL is set with host.docker.internal" time="0.000140458">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return an error message if API KEY is not set for external API" time="0.000124167">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; OPENAI_COMPATIBLE &gt; should return an error message if no base URL is set" time="0.000137166">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return an error message for an invalid auth method" time="0.000122042">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.integration.test.ts" timestamp="2025-08-12T09:09:11.543Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.032059417">
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should load default file filtering settings" time="0.023469417">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should load custom file filtering settings from configuration" time="0.000972542">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should merge user and workspace file filtering settings" time="0.0010465">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle partial configuration objects gracefully" time="0.000676125">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle empty configuration objects gracefully" time="0.000614458">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle missing configuration sections gracefully" time="0.000731375">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Real-world Configuration Scenarios &gt; should handle a security-focused configuration" time="0.000660542">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Real-world Configuration Scenarios &gt; should handle a CI/CD environment configuration" time="0.00083275">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Checkpointing Configuration &gt; should enable checkpointing when the setting is true" time="0.000714375">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Extension Context Files &gt; should have an empty array for extension context files by default" time="0.000831417">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Extension Context Files &gt; should correctly store and return extension context file paths" time="0.000679541">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-08-12T09:09:11.546Z" hostname="63accec1df8b" tests="59" failures="0" errors="0" skipped="0" time="0.39645925">
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when both --prompt and --prompt-interactive are used together" time="0.030139667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when using short flags -p and -i together" time="0.005216458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --prompt without --prompt-interactive" time="0.003896833">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --prompt-interactive without --prompt" time="0.003768625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow -i flag as alias for --prompt-interactive" time="0.008201125">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to true when --show-memory-usage flag is present" time="0.027980584">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to false when --memory flag is not present" time="0.006315166">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to false by default from settings if CLI flag is not present" time="0.005148625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should prioritize CLI flag over settings for showMemoryUsage (CLI true, settings false)" time="0.003905083">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to false by default when no flag or setting is present" time="0.005073584">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to true when --telemetry flag is present" time="0.014309542">
            <system-out>
OpenTelemetry SDK started successfully.

            </system-out>
            <system-err>
Accessing resource attributes before async attributes settled

            </system-err>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to false when --no-telemetry flag is present" time="0.006472791">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry value from settings if CLI flag is not present (settings true)" time="0.005212875">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry value from settings if CLI flag is not present (settings false)" time="0.0043065">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry CLI flag (true) over settings (false)" time="0.007469666">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --no-telemetry CLI flag (false) over settings (true)" time="0.003381209">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry OTLP endpoint from settings if CLI flag is not present" time="0.003562166">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-otlp-endpoint CLI flag over settings" time="0.006606708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default endpoint if no OTLP endpoint is provided via CLI or settings" time="0.008707333">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry target from settings if CLI flag is not present" time="0.004112375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-target CLI flag over settings" time="0.004313167">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default target if no target is provided via CLI or settings" time="0.009747166">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry log prompts from settings if CLI flag is not present" time="0.0039385">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-log-prompts CLI flag (true) over settings (false)" time="0.005570416">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --no-telemetry-log-prompts CLI flag (false) over settings (true)" time="0.003177375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default log prompts (true) if no value is provided via CLI or settings" time="0.004267458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Hierarchical Memory Loading (config.ts) - Placeholder Suite &gt; should pass extension context file paths to loadServerHierarchicalMemory" time="0.010641083">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeMcpServers &gt; should not modify the original settings object" time="0.004175">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should merge excludeTools from settings and extensions" time="0.004078917">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle overlapping excludeTools between settings and extensions" time="0.006700667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle overlapping excludeTools between extensions" time="0.014970542">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should return an empty array when no excludeTools are specified" time="0.006161958">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle settings with excludeTools but no extensions" time="0.005407">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle extensions with excludeTools but no settings" time="0.004349541">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should not modify the original settings object" time="0.011701291">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow all MCP servers if the flag is not provided" time="0.01211825">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow only the specified MCP server" time="0.007732125">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow multiple specified MCP servers" time="0.008761042">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should handle server names that do not exist" time="0.003406167">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow no MCP servers if the flag is provided but empty" time="0.006207041">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should read allowMCPServers from settings" time="0.00481625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should read excludeMCPServers from settings" time="0.003075625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should override allowMCPServers with excludeMCPServers if overlapping " time="0.003135375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should prioritize mcp server flag if set " time="0.008758917">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig extensions &gt; should not filter extensions if --extensions flag is not used" time="0.005446458">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig extensions &gt; should filter extensions if --extensions flag is used" time="0.005038209">
            <system-out>
Activated extension: ext1 (version: 1.0.0)
Disabled extension: ext2

            </system-out>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be false by default" time="0.006447583">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be false if --ide-mode is true but TERM_PROGRAM is not vscode" time="0.007815542">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be false if settings.ideMode is true but TERM_PROGRAM is not vscode" time="0.004223708">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be true when --ide-mode is set and TERM_PROGRAM is vscode" time="0.005199542">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be true when settings.ideMode is true and TERM_PROGRAM is vscode" time="0.003609666">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should prioritize --ide-mode (true) over settings (false) when TERM_PROGRAM is vscode" time="0.004386792">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should prioritize --no-ide-mode (false) over settings (true) even when TERM_PROGRAM is vscode" time="0.003734583">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be false when --ide-mode is true, TERM_PROGRAM is vscode, but SANDBOX is set" time="0.00541325">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should be false when settings.ideMode is true, TERM_PROGRAM is vscode, but SANDBOX is set" time="0.00473975">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should add _ide_server when ideMode is true" time="0.004046542">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should throw an error if ideMode is true and no port is set" time="0.005067709">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should warn and overwrite if settings contain the reserved _ide_server name and ideMode is active" time="0.00326675">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig ideMode &gt; should NOT warn if settings contain the reserved _ide_server name and ideMode is NOT active" time="0.003455958">
        </testcase>
    </testsuite>
    <testsuite name="src/config/extension.test.ts" timestamp="2025-08-12T09:09:11.560Z" hostname="63accec1df8b" tests="7" failures="1" errors="0" skipped="0" time="0.02406125">
        <testcase classname="src/config/extension.test.ts" name="loadExtensions &gt; should load context file path when GEMINI.md is present" time="0.0168705">
            <system-out>
Loading extension: ext1 (version: 1.0.0)
Loading extension: ext2 (version: 2.0.0)

            </system-out>
            <failure message="expected [] to deeply equal [ Array(1) ]" type="AssertionError">
AssertionError: expected [] to deeply equal [ Array(1) ]

- Expected
+ Received

- [
-   &quot;/tmp/gemini-cli-test-workspace-rZsiwB/.gemini/extensions/ext1/GEMINI.md&quot;,
- ]
+ []

 ❯ src/config/extension.test.ts:59:32
            </failure>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="loadExtensions &gt; should load context file path from the extension config" time="0.0051845">
            <system-out>
Loading extension: ext1 (version: 1.0.0)

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="filterActiveExtensions &gt; should return all extensions if no enabled extensions are provided" time="0.000161084">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="filterActiveExtensions &gt; should return only the enabled extensions" time="0.000275458">
            <system-out>
Activated extension: ext1 (version: 1.0.0)
Disabled extension: ext2
Activated extension: ext3 (version: 1.0.0)

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="filterActiveExtensions &gt; should return no extensions when &quot;none&quot; is provided" time="0.000114917">
            <system-out>
All extensions are disabled.

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="filterActiveExtensions &gt; should handle case-insensitivity" time="0.000132917">
            <system-out>
Activated extension: ext1 (version: 1.0.0)
Disabled extension: ext2
Disabled extension: ext3

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="filterActiveExtensions &gt; should log an error for unknown extensions" time="0.00033125">
        </testcase>
    </testsuite>
    <testsuite name="src/config/settings.test.ts" timestamp="2025-08-12T09:09:11.564Z" hostname="63accec1df8b" tests="25" failures="0" errors="0" skipped="0" time="0.0146605">
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load empty settings if no files exist" time="0.002132041">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load system settings if only system file exists" time="0.001147584">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load user settings if only user file exists" time="0.000610625">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load workspace settings if only workspace file exists" time="0.000475666">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge user and workspace settings, with workspace taking precedence" time="0.001052042">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge system, user and workspace settings, with system taking precedence over workspace, and workspace over user" time="0.000670708">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle contextFileName correctly when only in user settings" time="0.000327042">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle contextFileName correctly when only in workspace settings" time="0.000268708">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should default contextFileName to undefined if not in any settings file" time="0.000567084">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load telemetry setting from user settings" time="0.000314166">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load telemetry setting from workspace settings" time="0.000261459">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should prioritize workspace telemetry setting over user setting" time="0.000376167">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should have telemetry as undefined if not in any settings file" time="0.00021625">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle JSON parsing errors gracefully" time="0.00088625">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in user settings" time="0.000350542">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in workspace settings" time="0.000312416">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should prioritize user env variables over workspace env variables if keys clash after resolution" time="0.00056925">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should prioritize workspace env variables over user env variables if keys clash after resolution" time="0.000458">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should prioritize system env variables over workspace env variables if keys clash after resolution" time="0.000510417">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should leave unresolved environment variables as is" time="0.000312875">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve multiple environment variables in a single string" time="0.000336042">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in arrays" time="0.000287917">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly pass through null, boolean, and number types, and handle undefined properties" time="0.000541166">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve multiple concatenated environment variables in a single string value" time="0.000248583">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; LoadedSettings class &gt; setValue should update the correct scope and recompute merged settings" time="0.00048375">
        </testcase>
    </testsuite>
    <testsuite name="src/services/CommandService.test.ts" timestamp="2025-08-12T09:09:11.570Z" hostname="63accec1df8b" tests="6" failures="4" errors="0" skipped="0" time="0.0091885">
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when using default production loader &gt; should initialize with an empty command tree" time="0.001149459">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when using default production loader &gt; loadCommands &gt; should load the built-in commands into the command tree" time="0.005844">
            <failure message="expected 18 to be 17 // Object.is equality" type="AssertionError">
AssertionError: expected 18 to be 17 // Object.is equality

- Expected
+ Received

- 17
+ 18

 ❯ src/services/CommandService.test.ts:117:29
            </failure>
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when using default production loader &gt; loadCommands &gt; should include ide command when ideMode is on" time="0.000370417">
            <failure message="expected 19 to be 18 // Object.is equality" type="AssertionError">
AssertionError: expected 19 to be 18 // Object.is equality

- Expected
+ Received

- 18
+ 19

 ❯ src/services/CommandService.test.ts:147:29
            </failure>
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when using default production loader &gt; loadCommands &gt; should overwrite any existing commands when called again" time="0.000214208">
            <failure message="expected 18 to be 17 // Object.is equality" type="AssertionError">
AssertionError: expected 18 to be 17 // Object.is equality

- Expected
+ Received

- 17
+ 18

 ❯ src/services/CommandService.test.ts:157:53
            </failure>
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when using default production loader &gt; getCommandTree &gt; should return the current command tree" time="0.000309166">
            <failure message="expected 18 to be 17 // Object.is equality" type="AssertionError">
AssertionError: expected 18 to be 17 // Object.is equality

- Expected
+ Received

- 17
+ 18

 ❯ src/services/CommandService.test.ts:176:35
            </failure>
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; when initialized with an injected loader function &gt; should use the provided loader instead of the built-in one" time="0.000513375">
        </testcase>
    </testsuite>
    <testsuite name="src/test-utils/mockCommandContext.test.ts" timestamp="2025-08-12T09:09:11.573Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.002673375">
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should return a valid CommandContext object with default mocks" time="0.001439791">
        </testcase>
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should apply top-level overrides correctly" time="0.000377708">
        </testcase>
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should apply deeply nested overrides correctly" time="0.000200292">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/App.test.tsx" timestamp="2025-08-12T09:09:11.574Z" hostname="63accec1df8b" tests="16" failures="13" errors="0" skipped="0" time="0.568156792">
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display default &quot;GEMINI.md&quot; in footer when contextFileName is not set and count is 1" time="0.092932875">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 1 GEMINI.md file&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 1 GEMINI.md file&apos;

- Expected
+ Received

- Using 1 GEMINI.md file
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:277:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display default &quot;GEMINI.md&quot; with plural when contextFileName is not set and count is &gt; 1" time="0.052427625">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 GEMINI.md files&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 GEMINI.md files&apos;

- Expected
+ Received

- Using 2 GEMINI.md files
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:294:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display custom contextFileName in footer when set and count is 1" time="0.0377245">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 1 AGENTS.md file&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 1 AGENTS.md file&apos;

- Expected
+ Received

- Using 1 AGENTS.md file
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:314:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display a generic message when multiple context files with different names are provided" time="0.052331458">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 context files&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 context files&apos;

- Expected
+ Received

- Using 2 context files
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:337:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display custom contextFileName with plural when set and count is &gt; 1" time="0.029425542">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 3 MY_NOTES.TXT files&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 3 MY_NOTES.TXT files&apos;

- Expected
+ Received

- Using 3 MY_NOTES.TXT files
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:357:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should not display context file message if count is 0, even if contextFileName is set" time="0.0272755">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display GEMINI.md and MCP server count when both are present" time="0.025087584">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;server&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;server&apos;

- Expected
+ Received

- server
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:397:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display only MCP server count when GEMINI.md count is 0" time="0.028624333">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 MCP servers&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Using 2 MCP servers&apos;

- Expected
+ Received

- Using 2 MCP servers
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:418:25
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display Tips component by default" time="0.027525667">
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/ui/App.test.tsx:431:29
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should not display Tips component when hideTips is true" time="0.016466917">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should display Header component by default" time="0.021378667">
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/ui/App.test.tsx:464:31
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should not display Header component when hideBanner is true" time="0.03094225">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; should show tips if system says show, but workspace and user settings say hide" time="0.018417042">
            <failure message="expected &quot;spy&quot; to be called at least once" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once
 ❯ src/ui/App.test.tsx:501:29
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; when no theme is set &gt; should display theme dialog if NO_COLOR is not set" time="0.018670375">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Select Theme&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Select Theme&apos;

- Expected
+ Received

- Select Theme
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:531:27
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; when no theme is set &gt; should display a message if NO_COLOR is set" time="0.049861208">
            <failure message="expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Theme configuration unavailable due t…&apos;" type="AssertionError">
AssertionError: expected &apos;\n  ERROR  MemoryManager not initiali…&apos; to contain &apos;Theme configuration unavailable due t…&apos;

- Expected
+ Received

- Theme configuration unavailable due to NO_COLOR env variable.
+
+   ERROR  MemoryManager not initialized. Please provide config on first call.
+
+  src/memory/memoryManager.ts:333:11
+
+  330:   }
+  331:
+  332:   if (!memoryManagerInstance) {
+  333:     throw new Error(&apos;MemoryManager not initialized. Please provide config on first call.&apos;);
+  334:   }
+  335:
+  336:   return memoryManagerInstance;
+
+  - getMemoryManager (src/memory/memoryManager.ts:333:11)
+  - useMemoryIntegration (src/ui/hooks/useMemoryIntegration.ts:16:32)
+  - App (src/ui/App.tsx:126:7)
+  -Object.react-stack-bottom- (/agents/node_modules/react-reconciler/cjs/react-reconciler.developmen
+   rame                      t.js:15859:20)
+  -renderWithHooks (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:3221:2
+                  2)
+  -updateFunctionCompone (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:
+   t                    6475:19)
+  - beginWork (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:8009:18)
+  -runWithFiberInDEV (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:1738
+                    :13)
+  -performUnitOfWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12834
+                   :22)
+  -workLoopSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12644:41)
+
+  -renderRootSync (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12624:1
+                 1)
+  -performWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12135
+                   :44)
+  -performSyncWorkOnRoo (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:2
+                       446:7)
+  -flushSyncWorkAcrossRoots_ (/agents/node_modules/react-reconciler/cjs/react-reconciler.development
+   mpl                      .js:2294:21)
+  -Object.flushSyncWor (/agents/node_modules/react-reconciler/cjs/react-reconciler.development.js:12
+                      394:12)
+  - Ink.render (file:///agents/node_modules/ink/src/ink.tsx:226:14)
+

 ❯ src/ui/App.test.tsx:546:27
            </failure>
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App UI &gt; with initial prompt from --prompt-interactive &gt; should submit the initial prompt automatically" time="0.037611916">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;hello from prompt-interactive&apos; ][90m

Number of calls: [1m0[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;hello from prompt-interactive&apos; ]

Number of calls: 0

 ❯ src/ui/App.test.tsx:591:31
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/startupWarnings.test.ts" timestamp="2025-08-12T09:09:11.583Z" hostname="63accec1df8b" tests="4" failures="0" errors="0" skipped="4" time="0">
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return warnings from the file and delete it" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return an empty array if the file does not exist" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return an error message if reading the file fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return a warning if deleting the file fails" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/userStartupWarnings.test.ts" timestamp="2025-08-12T09:09:11.585Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.002489167">
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; home directory check &gt; should return a warning when running in home directory" time="0.001251958">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; home directory check &gt; should not return a warning when running in a project directory" time="0.000142458">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; home directory check &gt; should handle errors when checking directory" time="0.000263292">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/contexts/SessionContext.test.tsx" timestamp="2025-08-12T09:09:11.586Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.022905667">
        <testcase classname="src/ui/contexts/SessionContext.test.tsx" name="SessionStatsContext &gt; should provide the correct initial state" time="0.010621">
            <system-err>
An update to Root inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act
An update to SessionStatsProvider inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/contexts/SessionContext.test.tsx" name="SessionStatsContext &gt; should update metrics when the uiTelemetryService emits an update" time="0.00159875">
            <system-err>
An update to Root inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act
An update to SessionStatsProvider inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act
`ReactDOMTestUtils.act` is deprecated in favor of `React.act`. Import `act` from `react` instead of `react-dom/test-utils`. See https://react.dev/warnings/react-dom-test-utils for more info.

            </system-err>
        </testcase>
        <testcase classname="src/ui/contexts/SessionContext.test.tsx" name="SessionStatsContext &gt; should throw an error when useSessionStats is used outside of a provider" time="0.00975575">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/AuthDialog.test.tsx" timestamp="2025-08-12T09:09:11.588Z" hostname="63accec1df8b" tests="10" failures="0" errors="0" skipped="0" time="0.37482275">
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; should show an error if the initial auth type is invalid" time="0.019635375">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_API_KEY environment variable &gt; should detect GEMINI_API_KEY environment variable" time="0.004883083">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_API_KEY environment variable &gt; should not show the GEMINI_API_KEY message if GEMINI_DEFAULT_AUTH_TYPE is set to something else" time="0.00400675">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_API_KEY environment variable &gt; should show the GEMINI_API_KEY message if GEMINI_DEFAULT_AUTH_TYPE is set to use api key" time="0.005899166">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_DEFAULT_AUTH_TYPE environment variable &gt; should select the auth type specified by GEMINI_DEFAULT_AUTH_TYPE" time="0.003361375">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_DEFAULT_AUTH_TYPE environment variable &gt; should fall back to default if GEMINI_DEFAULT_AUTH_TYPE is not set" time="0.00390225">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; GEMINI_DEFAULT_AUTH_TYPE environment variable &gt; should show an error and fall back to default if GEMINI_DEFAULT_AUTH_TYPE is invalid" time="0.005689167">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; should prevent exiting when no auth method is selected and show error message" time="0.110668125">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; should not exit if there is already an error message" time="0.107249667">
        </testcase>
        <testcase classname="src/ui/components/AuthDialog.test.tsx" name="AuthDialog &gt; should allow exiting when auth method is already selected" time="0.108684459">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/HistoryItemDisplay.test.tsx" timestamp="2025-08-12T09:09:11.590Z" hostname="63accec1df8b" tests="6" failures="0" errors="0" skipped="0" time="0.070400958">
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders UserMessage for &quot;user&quot; type" time="0.013739709">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders StatsDisplay for &quot;stats&quot; type" time="0.005406792">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders AboutBox for &quot;about&quot; type" time="0.004136708">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders ModelStatsDisplay for &quot;model_stats&quot; type" time="0.005012375">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders ToolStatsDisplay for &quot;tool_stats&quot; type" time="0.001621125">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders SessionSummaryDisplay for &quot;quit&quot; type" time="0.039717459">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/InputPrompt.test.tsx" timestamp="2025-08-12T09:09:11.592Z" hostname="63accec1df8b" tests="22" failures="0" errors="0" skipped="0" time="2.434749834">
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should call shellHistory.getPreviousCommand on up arrow in shell mode" time="0.119720875">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should call shellHistory.getNextCommand on down arrow in shell mode" time="0.104828667">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should set the buffer text when a shell history command is retrieved" time="0.10605975">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should call shellHistory.addCommandToHistory on submit in shell mode" time="0.105961">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should NOT call shell history methods when not in shell mode" time="0.2074065">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; clipboard image paste &gt; should handle Ctrl+V when clipboard has an image" time="0.104105792">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; clipboard image paste &gt; should not insert anything when clipboard has no image" time="0.10491225">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; clipboard image paste &gt; should handle image save failure gracefully" time="0.104042583">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; clipboard image paste &gt; should insert image path at cursor position with proper spacing" time="0.105331583">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; clipboard image paste &gt; should handle errors during clipboard operations" time="0.105384209">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should complete a partial parent command and add a space" time="0.105492209">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should append a sub-command when the parent command is already complete with a space" time="0.105620625">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should handle the &quot;backspace&quot; edge case correctly" time="0.105089917">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should complete a partial argument for a command" time="0.105588584">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should autocomplete on Enter when suggestions are active, without submitting" time="0.108038792">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should complete a command based on its altName" time="0.106015">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should not submit on Enter when the buffer is empty or only contains whitespace" time="0.104895083">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should submit directly on Enter when a complete leaf command is typed" time="0.105209958">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should autocomplete an @-path on Enter without submitting" time="0.104868042">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should add a newline on enter when the line ends with a backslash" time="0.104943708">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should clear the buffer on Ctrl+C if it has text" time="0.10511925">
        </testcase>
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="InputPrompt &gt; should NOT clear the buffer on Ctrl+C if it is empty" time="0.10472475">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/LoadingIndicator.test.tsx" timestamp="2025-08-12T09:09:11.597Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.027630708">
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should not render when streamingState is Idle" time="0.008458125">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render spinner, phrase, and time when streamingState is Responding" time="0.004971375">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render spinner (static), phrase but no time/cancel when streamingState is WaitingForConfirmation" time="0.001965375">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the currentLoadingPhrase correctly" time="0.001069334">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the elapsedTime correctly when Responding" time="0.001301834">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the elapsedTime correctly in human-readable format" time="0.001276791">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render rightContent when provided" time="0.001367459">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should transition correctly between states using rerender" time="0.003324666">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display fallback phrase if thought is empty" time="0.000919042">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the subject of a thought" time="0.001137917">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should prioritize thought.subject over currentLoadingPhrase" time="0.001065792">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ModelStatsDisplay.test.tsx" timestamp="2025-08-12T09:09:11.600Z" hostname="63accec1df8b" tests="6" failures="0" errors="0" skipped="0" time="0.052473958">
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should render &quot;no API calls&quot; message when there are no active models" time="0.014057208">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should not display conditional rows if no model has data for them" time="0.009905167">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display conditional rows if at least one model has data" time="0.007288583">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display stats for multiple models correctly" time="0.006889375">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should handle large values without wrapping or overlapping" time="0.007472458">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display a single model correctly" time="0.005976875">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/SessionSummaryDisplay.test.tsx" timestamp="2025-08-12T09:09:11.601Z" hostname="63accec1df8b" tests="1" failures="0" errors="0" skipped="0" time="0.056052083">
        <testcase classname="src/ui/components/SessionSummaryDisplay.test.tsx" name="&lt;SessionSummaryDisplay /&gt; &gt; renders the summary display with a title" time="0.055268708">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/StatsDisplay.test.tsx" timestamp="2025-08-12T09:09:11.602Z" hostname="63accec1df8b" tests="10" failures="0" errors="0" skipped="0" time="0.101492875">
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders only the Performance section in its zero state" time="0.017205125">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders a table with two models correctly" time="0.019142625">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders all sections when all data is present" time="0.010100584">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Rendering Tests &gt; hides User Agreement when no decisions are made" time="0.005068667">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Rendering Tests &gt; hides Efficiency section when cache is not used" time="0.004160542">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in green for high values" time="0.004037667">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in yellow for medium values" time="0.003659792">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in red for low values" time="0.005715291">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Title Rendering &gt; renders the default title when no title prop is provided" time="0.002626541">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Title Rendering &gt; renders the custom title when a title prop is provided" time="0.028686542">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/SynapticMemoryDashboard.test.tsx" timestamp="2025-08-12T09:09:11.604Z" hostname="63accec1df8b" tests="12" failures="12" errors="0" skipped="0" time="5.394877044">
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; 正常にレンダリングされること" time="0.049468458">
            <failure message="Unable to find an element with the text: Synaptic Memory Dashboard. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Synaptic Memory Dashboard. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:89:19
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Memoriesタブでメモリ一覧が表示されること" time="0.010790292">
            <failure message="Unable to find an element with the text: Total: 2. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Total: 2. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:102:19
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Synapsesタブでシナプス接続が表示されること" time="0.009726084">
            <failure message="Unable to find an element with the text: Synapses. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Synapses. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:113:28
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Healthタブでネットワーク健康状態が表示されること" time="0.008933833">
            <failure message="Unable to find an element with the text: Health. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Health. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:126:28
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Healthタブで問題と提案が表示されること" time="0.010305792">
            <failure message="Unable to find an element with the text: Health. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Health. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:140:28
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Configタブで設定が表示されること" time="0.008464875">
            <failure message="Unable to find an element with the text: Config. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Config. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:154:28
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; Escキーでダッシュボードが閉じられること" time="1.016889">
            <failure message="expected &quot;spy&quot; to be called at least once

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mシナプス記憶システム ダッシュボード[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m1[0m
              [0m] [0m
              [0m記憶一覧[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m2[0m
              [0m] [0m
              [0mシナプス結合[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m3[0m
              [0m] [0m
              [0mネットワーク診断[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m4[0m
              [0m] [0m
              [0m設定[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m記憶一覧 ([0m
                [0m3[0m
                [0m件)[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m► [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mGPT-5プロンプトガイドの分析結果[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-002[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mシナプス記憶システムのPhase 2実装完了[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-003[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mRESTful API設計とエンドポイント定義[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m詳細:[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mID: [0m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mアクセス数: [0m
                  [0m15[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m成功率: [0m
                  [0m92.0[0m
                  [0m%[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mタグ: [0m
                  [0mgpt5, prompting, analysis[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            シナプス記憶システム ダッシュボード
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              1
              ] 
              記憶一覧
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              2
              ] 
              シナプス結合
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              3
              ] 
              ネットワーク診断
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              4
              ] 
              設定
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                記憶一覧 (
                3
                件)
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ► 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  GPT-5プロンプトガイドの分析結果
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-002
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  シナプス記憶システムのPhase 2実装完了
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-003
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  RESTful API設計とエンドポイント定義
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  詳細:
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ID: 
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  アクセス数: 
                  15
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  成功率: 
                  92.0
                  %
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  タグ: 
                  gpt5, prompting, analysis
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:171:33
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; qキーでダッシュボードが閉じられること" time="1.015082876">
            <failure message="expected &quot;spy&quot; to be called at least once

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mシナプス記憶システム ダッシュボード[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m1[0m
              [0m] [0m
              [0m記憶一覧[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m2[0m
              [0m] [0m
              [0mシナプス結合[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m3[0m
              [0m] [0m
              [0mネットワーク診断[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m4[0m
              [0m] [0m
              [0m設定[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m記憶一覧 ([0m
                [0m3[0m
                [0m件)[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m► [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mGPT-5プロンプトガイドの分析結果[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-002[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mシナプス記憶システムのPhase 2実装完了[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-003[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mRESTful API設計とエンドポイント定義[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m詳細:[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mID: [0m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mアクセス数: [0m
                  [0m15[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m成功率: [0m
                  [0m92.0[0m
                  [0m%[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mタグ: [0m
                  [0mgpt5, prompting, analysis[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called at least once

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            シナプス記憶システム ダッシュボード
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              1
              ] 
              記憶一覧
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              2
              ] 
              シナプス結合
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              3
              ] 
              ネットワーク診断
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              4
              ] 
              設定
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                記憶一覧 (
                3
                件)
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ► 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  GPT-5プロンプトガイドの分析結果
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-002
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  シナプス記憶システムのPhase 2実装完了
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-003
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  RESTful API設計とエンドポイント定義
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  詳細:
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ID: 
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  アクセス数: 
                  15
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  成功率: 
                  92.0
                  %
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  タグ: 
                  gpt5, prompting, analysis
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:182:33
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; ターミナルサイズに応じてレイアウトが調整されること" time="0.024999041">
            <failure message="Unable to find an element with the text: Synaptic Memory Dashboard. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Synaptic Memory Dashboard. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:196:19
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; エラー状態が正しく表示されること" time="1.170124084">
            <failure message="Unable to find an element with the text: /Error:/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mシナプス記憶システム ダッシュボード[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m1[0m
              [0m] [0m
              [0m記憶一覧[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m2[0m
              [0m] [0m
              [0mシナプス結合[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m3[0m
              [0m] [0m
              [0mネットワーク診断[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m4[0m
              [0m] [0m
              [0m設定[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m記憶一覧 ([0m
                [0m3[0m
                [0m件)[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m► [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mGPT-5プロンプトガイドの分析結果[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-002[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mシナプス記憶システムのPhase 2実装完了[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-003[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mRESTful API設計とエンドポイント定義[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m詳細:[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mID: [0m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mアクセス数: [0m
                  [0m15[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m成功率: [0m
                  [0m92.0[0m
                  [0m%[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mタグ: [0m
                  [0mgpt5, prompting, analysis[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: /Error:/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            シナプス記憶システム ダッシュボード
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              1
              ] 
              記憶一覧
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              2
              ] 
              シナプス結合
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              3
              ] 
              ネットワーク診断
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              4
              ] 
              設定
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                記憶一覧 (
                3
                件)
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ► 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  GPT-5プロンプトガイドの分析結果
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-002
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  シナプス記憶システムのPhase 2実装完了
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-003
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  RESTful API設計とエンドポイント定義
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  詳細:
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ID: 
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  アクセス数: 
                  15
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  成功率: 
                  92.0
                  %
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  タグ: 
                  gpt5, prompting, analysis
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:218:11
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; ローディング状態が正しく表示されること" time="2.057071418">
            <failure message="Unable to find an element with the text: Loading.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mシナプス記憶システム ダッシュボード[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m1[0m
              [0m] [0m
              [0m記憶一覧[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m2[0m
              [0m] [0m
              [0mシナプス結合[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m3[0m
              [0m] [0m
              [0mネットワーク診断[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m[[0m
              [0m4[0m
              [0m] [0m
              [0m設定[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m記憶一覧 ([0m
                [0m3[0m
                [0m件)[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m► [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mGPT-5プロンプトガイドの分析結果[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-002[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mシナプス記憶システムのPhase 2実装完了[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m  [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m[[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mmem-003[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m] [0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mRESTful API設計とエンドポイント定義[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-box[39m
                [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
              [36m&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m詳細:[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mID: [0m
                  [0mmem-001[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mアクセス数: [0m
                  [0m15[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0m成功率: [0m
                  [0m92.0[0m
                  [0m%[0m
                [36m&lt;/ink-text&gt;[39m
                [36m&lt;ink-text[39m
                  [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
                [36m&gt;[39m
                  [0mタグ: [0m
                  [0mgpt5, prompting, analysis[0m
                [36m&lt;/ink-text&gt;[39m
              [36m&lt;/ink-box&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/div&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: Loading.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            シナプス記憶システム ダッシュボード
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              1
              ] 
              記憶一覧
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              2
              ] 
              シナプス結合
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              3
              ] 
              ネットワーク診断
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              [
              4
              ] 
              設定
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                記憶一覧 (
                3
                件)
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ► 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  GPT-5プロンプトガイドの分析結果
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-002
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  シナプス記憶システムのPhase 2実装完了
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                    
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  [
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  mem-003
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ] 
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  RESTful API設計とエンドポイント定義
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-box
                style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
              &gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  詳細:
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  ID: 
                  mem-001
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  アクセス数: 
                  15
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  成功率: 
                  92.0
                  %
                &lt;/ink-text&gt;
                &lt;ink-text
                  style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
                &gt;
                  タグ: 
                  gpt5, prompting, analysis
                &lt;/ink-text&gt;
              &lt;/ink-box&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
 ❯ Proxy.waitForWrapper node_modules/@testing-library/dom/dist/wait-for.js:163:27
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:243:11
            </failure>
        </testcase>
        <testcase classname="src/ui/components/SynapticMemoryDashboard.test.tsx" name="SynapticMemoryDashboard &gt; タブ間の切り替えが正しく動作すること" time="0.011939708">
            <failure message="Unable to find an element with the text: テストメモリ1. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
[36m&lt;body&gt;[39m
  [36m&lt;div&gt;[39m
    [36m&lt;ink-box[39m
      [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
    [36m&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mシナプス記憶システム ダッシュボード[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m1[0m
            [0m] [0m
            [0m記憶一覧[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m2[0m
            [0m] [0m
            [0mシナプス結合[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m3[0m
            [0m] [0m
            [0mネットワーク診断[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-text[39m
            [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
          [36m&gt;[39m
            [0m[[0m
            [0m4[0m
            [0m] [0m
            [0m設定[0m
          [36m&lt;/ink-text&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-box[39m
          [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
        [36m&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-text[39m
              [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
            [36m&gt;[39m
              [0m記憶一覧 ([0m
              [0m3[0m
              [0m件)[0m
            [36m&lt;/ink-text&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m► [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mGPT-5プロンプトガイドの分析結果[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-002[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mシナプス記憶システムのPhase 2実装完了[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m  [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m[[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mmem-003[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m] [0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mRESTful API設計とエンドポイント定義[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
          [36m&lt;ink-box[39m
            [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
          [36m&gt;[39m
            [36m&lt;ink-box[39m
              [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;[39m
            [36m&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m詳細:[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mID: [0m
                [0mmem-001[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mアクセス数: [0m
                [0m15[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0m成功率: [0m
                [0m92.0[0m
                [0m%[0m
              [36m&lt;/ink-text&gt;[39m
              [36m&lt;ink-text[39m
                [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
              [36m&gt;[39m
                [0mタグ: [0m
                [0mgpt5, prompting, analysis[0m
              [36m&lt;/ink-text&gt;[39m
            [36m&lt;/ink-box&gt;[39m
          [36m&lt;/ink-box&gt;[39m
        [36m&lt;/ink-box&gt;[39m
      [36m&lt;/ink-box&gt;[39m
      [36m&lt;ink-box[39m
        [33mstyle[39m=[32m&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;[39m
      [36m&gt;[39m
        [36m&lt;ink-text[39m
          [33mstyle[39m=[32m&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;[39m
        [36m&gt;[39m
          [0mTab: タブ切替 | ↑↓: 記憶選択 | q: 終了[0m
        [36m&lt;/ink-text&gt;[39m
      [36m&lt;/ink-box&gt;[39m
    [36m&lt;/ink-box&gt;[39m
  [36m&lt;/div&gt;[39m
[36m&lt;/body&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an element with the text: テストメモリ1. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
&lt;body&gt;
  &lt;div&gt;
    &lt;ink-box
      style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; width: 52px; height: 20px; padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
    &gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          シナプス記憶システム ダッシュボード
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            1
            ] 
            記憶一覧
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            2
            ] 
            シナプス結合
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            3
            ] 
            ネットワーク診断
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-right: 2px; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-text
            style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
          &gt;
            [
            4
            ] 
            設定
          &lt;/ink-text&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 1; flex-shrink: 1; overflow: hidden; overflow-x: hidden; overflow-y: hidden;&quot;
      &gt;
        &lt;ink-box
          style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 1; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
        &gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-bottom: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-text
              style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
            &gt;
              記憶一覧 (
              3
              件)
            &lt;/ink-text&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 0; width: 48px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ► 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                GPT-5プロンプトガイドの分析結果
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-002
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                シナプス記憶システムのPhase 2実装完了
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                  
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                [
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                mem-003
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ] 
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                RESTful API設計とエンドポイント定義
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
          &lt;ink-box
            style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
          &gt;
            &lt;ink-box
              style=&quot;flex-wrap: nowrap; flex-direction: column; flex-grow: 0; flex-shrink: 1; overflow-x: visible; overflow-y: visible;&quot;
            &gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                詳細:
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                ID: 
                mem-001
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                アクセス数: 
                15
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                成功率: 
                92.0
                %
              &lt;/ink-text&gt;
              &lt;ink-text
                style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
              &gt;
                タグ: 
                gpt5, prompting, analysis
              &lt;/ink-text&gt;
            &lt;/ink-box&gt;
          &lt;/ink-box&gt;
        &lt;/ink-box&gt;
      &lt;/ink-box&gt;
      &lt;ink-box
        style=&quot;flex-wrap: nowrap; flex-direction: row; flex-grow: 0; flex-shrink: 1; margin-top: 1px; border-color: rgb(108, 112, 134); padding: 1px; overflow-x: visible; overflow-y: visible;&quot;
      &gt;
        &lt;ink-text
          style=&quot;flex-grow: 0; flex-shrink: 1; flex-direction: row; text-wrap: wrap;&quot;
        &gt;
          Tab: タブ切替 | ↑↓: 記憶選択 | q: 終了
        &lt;/ink-text&gt;
      &lt;/ink-box&gt;
    &lt;/ink-box&gt;
  &lt;/div&gt;
&lt;/body&gt;
 ❯ Object.getElementError node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/ui/components/SynapticMemoryDashboard.test.tsx:252:19
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ToolStatsDisplay.test.tsx" timestamp="2025-08-12T09:09:11.618Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.040501541">
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should render &quot;no tool calls&quot; message when there are no active tools" time="0.014070125">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should display stats for a single tool correctly" time="0.006458667">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should display stats for multiple tools correctly" time="0.005223208">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should handle large values without wrapping or overlapping" time="0.009633959">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should handle zero decisions gracefully" time="0.004384292">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/aboutCommand.test.ts" timestamp="2025-08-12T09:09:11.619Z" hostname="63accec1df8b" tests="4" failures="0" errors="0" skipped="0" time="0.004775833">
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should have the correct name and description" time="0.001484125">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should call addItem with all version info" time="0.00175525">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should show the correct sandbox environment variable" time="0.000559375">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should show sandbox-exec profile when applicable" time="0.00026725">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/authCommand.test.ts" timestamp="2025-08-12T09:09:11.620Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.002773042">
        <testcase classname="src/ui/commands/authCommand.test.ts" name="authCommand &gt; should return a dialog action to open the auth dialog" time="0.001819292">
        </testcase>
        <testcase classname="src/ui/commands/authCommand.test.ts" name="authCommand &gt; should have the correct name and description" time="0.000241125">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/bugCommand.test.ts" timestamp="2025-08-12T09:09:11.621Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.0030985">
        <testcase classname="src/ui/commands/bugCommand.test.ts" name="bugCommand &gt; should generate the default GitHub issue URL" time="0.0020635">
        </testcase>
        <testcase classname="src/ui/commands/bugCommand.test.ts" name="bugCommand &gt; should use a custom URL template from config if provided" time="0.000329584">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/chatCommand.test.ts" timestamp="2025-08-12T09:09:11.622Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.006735125">
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; should have the correct main command definition" time="0.001652167">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; list subcommand &gt; should inform when no checkpoints are found" time="0.000764916">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; list subcommand &gt; should list found checkpoints" time="0.000483042">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should return an error if tag is missing" time="0.000285416">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should inform if conversation history is empty" time="0.000314709">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should save the conversation" time="0.000654041">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should return an error if tag is missing" time="0.00030625">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should inform if checkpoint is not found" time="0.000380583">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should resume a conversation" time="0.000344792">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; completion &gt; should provide completion suggestions" time="0.00034325">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; completion &gt; should suggest filenames sorted by modified time (newest first)" time="0.00043025">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/clearCommand.test.ts" timestamp="2025-08-12T09:09:11.624Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.003618125">
        <testcase classname="src/ui/commands/clearCommand.test.ts" name="clearCommand &gt; should set debug message, reset chat, and clear UI when config is available" time="0.002389875">
        </testcase>
        <testcase classname="src/ui/commands/clearCommand.test.ts" name="clearCommand &gt; should not attempt to reset chat if config service is not available" time="0.000438209">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/compressCommand.test.ts" timestamp="2025-08-12T09:09:11.625Z" hostname="63accec1df8b" tests="5" failures="1" errors="0" skipped="0" time="0.016377042">
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should do nothing if a compression is already pending" time="0.002989083">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should set pending item, call tryCompressChat, and add result on success" time="0.0117865">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ ObjectContaining{…}, Any&lt;Number&gt; ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[32m-   ObjectContaining {[90m
[32m-     &quot;compression&quot;: {[90m
[32m-       &quot;isPending&quot;: false,[90m
[32m-       &quot;newTokenCount&quot;: 100,[90m
[32m-       &quot;originalTokenCount&quot;: 200,[90m
[31m+   {[90m
[31m+     &quot;text&quot;: &quot;Failed to compress chat history: context.services.config?.getModel is not a function&quot;,[90m
[31m+     &quot;type&quot;: &quot;error&quot;,[90m
[2m    },[22m
[32m-     &quot;type&quot;: &quot;compression&quot;,[90m
[32m-   },[90m
[32m-   Any&lt;Number&gt;,[90m
[31m+   1754989746121,[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ ObjectContaining{…}, Any&lt;Number&gt; ]

Received: 

  1st spy call:

  [
-   ObjectContaining {
-     &quot;compression&quot;: {
-       &quot;isPending&quot;: false,
-       &quot;newTokenCount&quot;: 100,
-       &quot;originalTokenCount&quot;: 200,
+   {
+     &quot;text&quot;: &quot;Failed to compress chat history: context.services.config?.getModel is not a function&quot;,
+     &quot;type&quot;: &quot;error&quot;,
    },
-     &quot;type&quot;: &quot;compression&quot;,
-   },
-   Any&lt;Number&gt;,
+   1754989746121,
  ]


Number of calls: 1

 ❯ src/ui/commands/compressCommand.test.ts:78:32
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should add an error message if tryCompressChat returns falsy" time="0.000366">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should add an error message if tryCompressChat throws" time="0.000368333">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should clear the pending item in a finally block" time="0.0001725">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/docsCommand.test.ts" timestamp="2025-08-12T09:09:11.627Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.004058875">
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should add an info message and call &apos;open&apos; in a non-sandbox environment" time="0.002680208">
        </testcase>
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should only add an info message in a sandbox environment" time="0.000424666">
        </testcase>
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should not open browser for &apos;sandbox-exec&apos;" time="0.000248292">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/editorCommand.test.ts" timestamp="2025-08-12T09:09:11.628Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.00250675">
        <testcase classname="src/ui/commands/editorCommand.test.ts" name="editorCommand &gt; should return a dialog action to open the editor dialog" time="0.001642959">
        </testcase>
        <testcase classname="src/ui/commands/editorCommand.test.ts" name="editorCommand &gt; should have the correct name and description" time="0.000143667">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/extensionsCommand.test.ts" timestamp="2025-08-12T09:09:11.628Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.003880167">
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; should display &quot;No active extensions.&quot; when none are found" time="0.002863959">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; should list active extensions when they are found" time="0.000333625">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/helpCommand.test.ts" timestamp="2025-08-12T09:09:11.629Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.003192417">
        <testcase classname="src/ui/commands/helpCommand.test.ts" name="helpCommand &gt; should return a dialog action and log a debug message for &apos;/help&apos;" time="0.002405916">
        </testcase>
        <testcase classname="src/ui/commands/helpCommand.test.ts" name="helpCommand &gt; should also be triggered by its alternative name &apos;?&apos;" time="0.000140084">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/ideCommand.test.ts" timestamp="2025-08-12T09:09:11.630Z" hostname="63accec1df8b" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="src/ui/commands/ideCommand.test.ts" time="0">
            <failure message="Failed to resolve import &quot;@google/gemini-cli-core&quot; from &quot;src/ui/commands/ideCommand.test.ts&quot;. Does the file exist?" type="Error">
Error: Failed to resolve import &quot;@google/gemini-cli-core&quot; from &quot;src/ui/commands/ideCommand.test.ts&quot;. Does the file exist?
  Plugin: vite:import-analysis
  File: /agents/packages/cli/src/ui/commands/ideCommand.test.ts:14:0
  12 |  const __vi_import_1__ = await import(&quot;child_process&quot;);
  13 |  const __vi_import_2__ = await import(&quot;glob&quot;);
  14 |  const __vi_import_3__ = await import(&quot;@google/gemini-cli-core&quot;);
     |                                       ^
  15 |  /**
  16 |   * @license
 ❯ TransformPluginContext._formatLog ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31446:43
 ❯ TransformPluginContext.error ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31443:14
 ❯ normalizeUrl ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:29992:18
 ❯ ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:30050:32
 ❯ TransformPluginContext.transform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:30018:4
 ❯ EnvironmentPluginContainer.transform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31260:14
 ❯ loadAndTransform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:26434:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/mcpCommand.test.ts" timestamp="2025-08-12T09:09:11.631Z" hostname="63accec1df8b" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="src/ui/commands/mcpCommand.test.ts" time="0">
            <failure message="Failed to resolve import &quot;@google/gemini-cli-core&quot; from &quot;src/ui/commands/mcpCommand.test.ts&quot;. Does the file exist?" type="Error">
Error: Failed to resolve import &quot;@google/gemini-cli-core&quot; from &quot;src/ui/commands/mcpCommand.test.ts&quot;. Does the file exist?
  Plugin: vite:import-analysis
  File: /agents/packages/cli/src/ui/commands/mcpCommand.test.ts:10:0
  12 |  const __vi_import_0__ = await import(&quot;./mcpCommand.js&quot;);
  13 |  const __vi_import_1__ = await import(&quot;../../test-utils/mockCommandContext.js&quot;);
  14 |  const __vi_import_2__ = await import(&quot;@google/gemini-cli-core&quot;);
     |                                       ^
  15 |  const __vi_import_3__ = await import(&quot;open&quot;);
  16 |  const __vi_import_4__ = await import(&quot;@google/genai&quot;);
 ❯ TransformPluginContext._formatLog ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31446:43
 ❯ TransformPluginContext.error ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31443:14
 ❯ normalizeUrl ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:29992:18
 ❯ ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:30050:32
 ❯ TransformPluginContext.transform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:30018:4
 ❯ EnvironmentPluginContainer.transform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:31260:14
 ❯ loadAndTransform ../../node_modules/vite/dist/node/chunks/dep-Bsx9IwL8.js:26434:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/memoryCommand.test.ts" timestamp="2025-08-12T09:09:11.631Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.006055416">
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory show &gt; should display a message if memory is empty" time="0.002598667">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory show &gt; should display the memory content and file count if it exists" time="0.000331166">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory add &gt; should return an error message if no arguments are provided" time="0.000312167">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory add &gt; should return a tool action and add an info message when arguments are provided" time="0.000307416">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display success message when memory is refreshed with content" time="0.000430791">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display success message when memory is refreshed with no content" time="0.000236708">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display an error message if refreshing fails" time="0.000467584">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should not throw if config service is unavailable" time="0.000580666">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/privacyCommand.test.ts" timestamp="2025-08-12T09:09:11.633Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.002736458">
        <testcase classname="src/ui/commands/privacyCommand.test.ts" name="privacyCommand &gt; should return a dialog action to open the privacy dialog" time="0.001784875">
        </testcase>
        <testcase classname="src/ui/commands/privacyCommand.test.ts" name="privacyCommand &gt; should have the correct name and description" time="0.000264084">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/quitCommand.test.ts" timestamp="2025-08-12T09:09:11.634Z" hostname="63accec1df8b" tests="1" failures="0" errors="0" skipped="0" time="0.003773542">
        <testcase classname="src/ui/commands/quitCommand.test.ts" name="quitCommand &gt; returns a QuitActionReturn object with the correct messages" time="0.003090542">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/statsCommand.test.ts" timestamp="2025-08-12T09:09:11.634Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.00533125">
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display general session stats when run with no subcommand" time="0.004009291">
        </testcase>
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display model stats when using the &quot;model&quot; subcommand" time="0.0003135">
        </testcase>
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display tool stats when using the &quot;tools&quot; subcommand" time="0.000217958">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/synapticCommand.test.ts" timestamp="2025-08-12T09:09:11.635Z" hostname="63accec1df8b" tests="17" failures="17" errors="0" skipped="0" time="0.016800958">
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 引数なしでダッシュボードを表示すること" time="0.00767475">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:45:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; helpコマンドでヘルプメッセージを表示すること" time="0.000341708">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:57:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; --helpフラグでヘルプメッセージを表示すること" time="0.000174625">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:66:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; -hフラグでヘルプメッセージを表示すること" time="0.000157917">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:73:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; statusコマンドでシステム状態を表示すること" time="0.000380208">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:109:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; searchコマンドでメモリ検索を実行すること" time="0.000267416">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:143:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 検索クエリなしでsearchコマンドを実行した場合エラーになること" time="0.000147584">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:153:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; activateコマンドでメモリ活性化を実行すること" time="0.000208042">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:179:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; メモリIDなしでactivateコマンドを実行した場合エラーになること" time="0.00014675">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:188:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 存在しないサブコマンドでエラーになること" time="0.0001415">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:195:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; ダッシュボード表示エラーをハンドリングすること" time="0.000180542">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:204:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; status取得エラーをハンドリングすること" time="0.000195458">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:221:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 検索エラーをハンドリングすること" time="0.000189459">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:236:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 活性化エラーをハンドリングすること" time="0.000230959">
            <failure message="expected undefined to be false // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:253:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 検索結果が空の場合の処理" time="0.00018725">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:268:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 活性化結果が空の場合の処理" time="0.000207667">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/commands/synapticCommand.test.ts:285:28
            </failure>
        </testcase>
        <testcase classname="src/ui/commands/synapticCommand.test.ts" name="synapticCommand &gt; 複雑な検索クエリを正しく解析すること" time="0.0051765">
            <failure message="expected &quot;spy&quot; to be called with arguments: [ &apos;複雑な検索クエリ&apos;, 10 ][90m

Number of calls: [1m0[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ &apos;複雑な検索クエリ&apos;, 10 ]

Number of calls: 0

 ❯ src/ui/commands/synapticCommand.test.ts:301:34
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/themeCommand.test.ts" timestamp="2025-08-12T09:09:11.645Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.002632166">
        <testcase classname="src/ui/commands/themeCommand.test.ts" name="themeCommand &gt; should return a dialog action to open the theme dialog" time="0.001746">
        </testcase>
        <testcase classname="src/ui/commands/themeCommand.test.ts" name="themeCommand &gt; should have the correct name and description" time="0.000231542">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/toolsCommand.test.ts" timestamp="2025-08-12T09:09:11.646Z" hostname="63accec1df8b" tests="4" failures="0" errors="0" skipped="0" time="0.005109667">
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should display an error if the tool registry is unavailable" time="0.003093541">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should display &quot;No tools available&quot; when none are found" time="0.000640375">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should list tools without descriptions by default" time="0.000369541">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should list tools with descriptions when &quot;desc&quot; arg is passed" time="0.000191791">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/atCommandProcessor.test.ts" timestamp="2025-08-12T09:09:11.647Z" hostname="63accec1df8b" tests="17" failures="0" errors="0" skipped="0" time="0.013092417">
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should pass through query if no @ command is present" time="0.002785375">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should pass through original query if only a lone @ symbol is present" time="0.000397333">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a valid text file path" time="0.001773875">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a valid directory path and convert to glob" time="0.000717208">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a valid image file path (as text content for now)" time="0.000271667">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle query with text before and after @command" time="0.000331834">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should correctly unescape paths with escaped spaces" time="0.0005245">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle multiple @file references" time="0.000562625">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle multiple @file references with interleaved text" time="0.000500917">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle a mix of valid, invalid, and lone @ references" time="0.000933709">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should return original query if all @paths are invalid or lone @" time="0.000305792">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a file path case-insensitively" time="0.000651333">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should skip git-ignored files in @ commands" time="0.000449375">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should process non-git-ignored files normally" time="0.000569667">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should handle mixed git-ignored and valid files" time="0.000709708">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should always ignore .git directory files" time="0.000400833">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; when recursive file search is disabled &gt; should not use glob search for a nonexistent file" time="0.000394167">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/shellCommandProcessor.test.ts" timestamp="2025-08-12T09:09:11.651Z" hostname="63accec1df8b" tests="3" failures="0" errors="0" skipped="0" time="0.021611166">
        <testcase classname="src/ui/hooks/shellCommandProcessor.test.ts" name="useShellCommandProcessor &gt; should execute a command and update history on success" time="0.011706959">
        </testcase>
        <testcase classname="src/ui/hooks/shellCommandProcessor.test.ts" name="useShellCommandProcessor &gt; should handle binary output" time="0.006345">
        </testcase>
        <testcase classname="src/ui/hooks/shellCommandProcessor.test.ts" name="useShellCommandProcessor &gt; should handle command failure" time="0.002674792">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/slashCommandProcessor.test.ts" timestamp="2025-08-12T09:09:11.652Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.379277083">
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should execute a command from the new registry" time="0.062223375">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should return &quot;schedule_tool&quot; when a new command returns a tool action" time="0.052605917">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should return &quot;handled&quot; when a new command returns a message action" time="0.054034917">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should return &quot;handled&quot; when a new command returns a dialog action" time="0.051916167">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should open the auth dialog when a new command returns an auth dialog action" time="0.051928583">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should open the theme dialog when a new command returns a theme dialog action" time="0.051966">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="useSlashCommandProcessor &gt; New command registry &gt; should show help for a parent command with no action" time="0.052154875">
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useAutoAcceptIndicator.test.ts" timestamp="2025-08-12T09:09:11.656Z" hostname="63accec1df8b" tests="6" failures="0" errors="0" skipped="0" time="0.017821417">
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should initialize with ApprovalMode.AUTO_EDIT if config.getApprovalMode returns ApprovalMode.AUTO_EDIT" time="0.009027">
        </testcase>
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should initialize with ApprovalMode.DEFAULT if config.getApprovalMode returns ApprovalMode.DEFAULT" time="0.001208042">
        </testcase>
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should initialize with ApprovalMode.YOLO if config.getApprovalMode returns ApprovalMode.YOLO" time="0.000944667">
        </testcase>
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should toggle the indicator and update config when Shift+Tab or Ctrl+Y is pressed" time="0.003307459">
        </testcase>
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should not toggle if only one key or other keys combinations are pressed" time="0.001140958">
        </testcase>
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="useAutoAcceptIndicator &gt; should update indicator when config value changes externally (useEffect dependency)" time="0.001214625">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useCompletion.integration.test.ts" timestamp="2025-08-12T09:09:11.657Z" hostname="63accec1df8b" tests="23" failures="0" errors="0" skipped="0" time="1.701574543">
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should filter git-ignored entries from @ completions" time="0.162080167">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should filter git-ignored directories from @ completions" time="0.152264834">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should handle recursive search with git-aware filtering" time="0.152226417">
            <system-err>
Error fetching completion suggestions for t: Cannot read properties of undefined (reading &apos;map&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should not perform recursive search when disabled in config" time="0.1521755">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should work without config (fallback behavior)" time="0.152796458">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should handle git discovery service initialization failure gracefully" time="0.151775458">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should handle directory-specific completions with git filtering" time="0.15186">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should use glob for top-level @ completions when available" time="0.152314917">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should include dotfiles in glob search when input starts with a dot" time="0.151809667">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest top-level command names based on partial input" time="0.00124075">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should not suggest commands when altName is fully typed" time="0.001293584">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should not suggest commands when altName is fully typed" time="0.004429833">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest commands based on partial altName matches" time="0.001025042">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest sub-command names for a parent command" time="0.000895375">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest all sub-commands when the query ends with the parent command and a space" time="0.001486875">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should call the command.completion function for argument suggestions" time="0.152617208">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should not provide suggestions for a fully typed command that has no sub-commands or argument completion" time="0.00102925">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should not provide suggestions for an unknown command" time="0.000841583">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest sub-commands for a fully typed parent command without a trailing space" time="0.000869">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should NOT provide suggestions for a perfectly typed command that is a leaf node" time="0.000968541">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should call command.completion with an empty string when args start with a space" time="0.152322959">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should suggest all top-level commands for the root slash" time="0.001089875">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.integration.test.ts" name="useCompletion git-aware filtering integration &gt; should provide no suggestions for an invalid sub-command" time="0.000912792">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useCompletion.test.ts" timestamp="2025-08-12T09:09:11.663Z" hostname="63accec1df8b" tests="36" failures="0" errors="0" skipped="0" time="2.029329126">
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Hook initialization and state &gt; should initialize with default state" time="0.010403375">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Hook initialization and state &gt; should reset state when isActive becomes false" time="0.001835541">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Hook initialization and state &gt; should provide required functions" time="0.001118416">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; resetCompletionState &gt; should reset all state to default values" time="0.001347084">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should handle navigateUp with no suggestions" time="0.001278542">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should handle navigateDown with no suggestions" time="0.001089667">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should navigate up through suggestions with wrap-around" time="0.001369959">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should navigate down through suggestions with wrap-around" time="0.0013195">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should handle navigation with multiple suggestions" time="0.00167525">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Navigation functions &gt; should handle navigation with large suggestion lists and scrolling" time="0.001529459">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should show all commands for root slash" time="0.002036042">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should filter commands by prefix" time="0.001226291">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should not suggest commands when altName is fully typed" time="0.001588917">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should not suggest commands when altName is fully typed" time="0.001157708">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should suggest commands based on partial altName matches" time="0.001127833">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should not show suggestions for exact leaf command match" time="0.000962708">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should show sub-commands for parent commands" time="0.001280875">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should show all sub-commands after parent command with space" time="0.001209">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should filter sub-commands by prefix" time="0.001020166">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Slash command completion &gt; should handle unknown command gracefully" time="0.000979833">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Command argument completion &gt; should call completion function for command arguments" time="0.153306333">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Command argument completion &gt; should call completion function with partial argument" time="0.153218416">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Command argument completion &gt; should handle completion function that returns null" time="0.153029334">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File path completion (@-syntax) &gt; should show file completions for @ prefix" time="0.152997917">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File path completion (@-syntax) &gt; should filter files by prefix" time="0.152974959">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File path completion (@-syntax) &gt; should include hidden files when prefix starts with dot" time="0.152664501">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File path completion (@-syntax) &gt; should handle ENOENT error gracefully" time="0.1520825">
            <system-err>
Error fetching completion suggestions for nonexistent: Cannot read properties of undefined (reading &apos;map&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File path completion (@-syntax) &gt; should handle other errors by resetting state" time="0.153187875">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Debouncing &gt; should debounce file completion requests" time="0.15349625">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Query handling edge cases &gt; should handle empty query" time="0.001401584">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Query handling edge cases &gt; should handle query without slash or @" time="0.001104625">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Query handling edge cases &gt; should handle query with whitespace" time="0.001095375">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Query handling edge cases &gt; should handle @ at the end of query" time="0.152699334">
            <system-err>
Error fetching completion suggestions for : entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; File sorting behavior &gt; should prioritize source files over test files with same base name" time="0.153356667">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Config and FileDiscoveryService integration &gt; should work without config" time="0.152687042">
        </testcase>
        <testcase classname="src/ui/hooks/useCompletion.test.ts" name="useCompletion &gt; Config and FileDiscoveryService integration &gt; should respect file filtering when config is provided" time="0.153173541">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useConsoleMessages.test.ts" timestamp="2025-08-12T09:09:11.671Z" hostname="63accec1df8b" tests="9" failures="0" errors="0" skipped="0" time="0.030482792">
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should initialize with an empty array of console messages" time="0.011186584">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should add a new message" time="0.002609">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should consolidate identical consecutive messages" time="0.004695292">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should not consolidate different messages" time="0.001764333">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should not consolidate messages if type is different" time="0.0015545">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should clear console messages" time="0.00185325">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should clear pending timeout on clearConsoleMessages" time="0.003271458">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should clear message queue on clearConsoleMessages" time="0.001292166">
        </testcase>
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="useConsoleMessages &gt; should cleanup timeout on unmount" time="0.00130525">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useEditorSettings.test.ts" timestamp="2025-08-12T09:09:11.674Z" hostname="63accec1df8b" tests="10" failures="0" errors="0" skipped="0" time="0.020231417">
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should initialize with dialog closed" time="0.00851525">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should open editor dialog when openEditorDialog is called" time="0.001557041">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should close editor dialog when exitEditorDialog is called" time="0.000911708">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should handle editor selection successfully" time="0.002468542">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should handle clearing editor preference (undefined editor)" time="0.000961792">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should handle different editor types" time="0.000988208">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should handle different setting scopes" time="0.00092575">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should not set preference for unavailable editors" time="0.0009075">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should not set preference for editors not allowed in sandbox" time="0.000965417">
        </testcase>
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="useEditorSettings &gt; should handle errors during editor selection" time="0.001068833">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useGeminiStream.test.tsx" timestamp="2025-08-12T09:09:11.676Z" hostname="63accec1df8b" tests="22" failures="0" errors="0" skipped="0" time="0.117364417">
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should merge multiple PartListUnion arrays" time="0.001069375">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should handle empty arrays in the input list" time="0.000200792">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should handle a single PartListUnion array" time="0.000094708">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should return an empty array if all input arrays are empty" time="0.000066459">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should handle input list being empty" time="0.000055167">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should correctly merge when PartListUnion items are single Parts not in arrays" time="0.000079958">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should handle a mix of arrays and single parts, including empty arrays and undefined/null parts if they were possible (though PartListUnion typing restricts this)" time="0.000074917">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should preserve the order of parts from the input arrays" time="0.000079042">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="mergePartListUnions &gt; should handle cases where some PartListUnion items are single Parts and others are arrays of Parts" time="0.000084041">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; should not submit tool responses if not all tool calls are completed" time="0.009784166">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; should submit tool responses when all tool calls are completed and ready" time="0.004699166">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; should handle all tool calls being cancelled" time="0.00298975">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; should group multiple cancelled tool call responses into a single history entry" time="0.003236667">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; should not flicker streaming state to Idle between tool completion and submission" time="0.003677">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; User Cancellation &gt; should cancel an in-progress stream when escape is pressed" time="0.016060125">
            <system-out>
Memory pattern search failed: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at Object.submitQuery [90m(/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.ts:606:33[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:891:24
    at [90m/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:48:24
    at process.env.NODE_ENV.exports.act (/agents/node_modules/[4mreact[24m/cjs/react.development.js:789:22)
    at Proxy.&lt;anonymous&gt; [90m(/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:47:25[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:890:13
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; User Cancellation &gt; should not do anything if escape is pressed when not responding" time="0.001500292">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; User Cancellation &gt; should prevent further processing after cancellation" time="0.055316959">
            <system-out>
Memory pattern search failed: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at Object.submitQuery [90m(/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.ts:606:33[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:950:24
    at [90m/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:48:24
    at process.env.NODE_ENV.exports.act (/agents/node_modules/[4mreact[24m/cjs/react.development.js:789:22)
    at Proxy.&lt;anonymous&gt; [90m(/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:47:25[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:949:13
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
            <system-err>
An update to TestComponent inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() =&gt; {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you&apos;re testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

            </system-err>
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; User Cancellation &gt; should not cancel if a tool call is in progress (not just responding)" time="0.00179925">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; Slash Command Handling &gt; should schedule a tool call when the command processor returns a schedule_tool action" time="0.004728667">
            <system-out>
Memory pattern search failed: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at Object.submitQuery [90m(/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.ts:606:33[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1020:30
    at [90m/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:48:24
    at process.env.NODE_ENV.exports.act (/agents/node_modules/[4mreact[24m/cjs/react.development.js:789:22)
    at Proxy.&lt;anonymous&gt; [90m(/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:47:25[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1019:13
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; Slash Command Handling &gt; should stop processing and not call Gemini when a command is handled without a tool call" time="0.003580917">
            <system-out>
Memory pattern search failed: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at Object.submitQuery [90m(/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.ts:606:33[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1047:30
    at [90m/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:48:24
    at process.env.NODE_ENV.exports.act (/agents/node_modules/[4mreact[24m/cjs/react.development.js:789:22)
    at Proxy.&lt;anonymous&gt; [90m(/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:47:25[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1046:13
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; Memory Refresh on save_memory &gt; should call performMemoryRefresh when a save_memory tool call completes successfully" time="0.003122333">
        </testcase>
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="useGeminiStream &gt; Error Handling &gt; should call parseAndFormatApiError with the correct authType on stream initialization failure" time="0.0040005">
            <system-out>
Memory pattern search failed: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at Object.submitQuery [90m(/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.ts:606:33[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1166:30
    at [90m/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:48:24
    at process.env.NODE_ENV.exports.act (/agents/node_modules/[4mreact[24m/cjs/react.development.js:789:22)
    at Proxy.&lt;anonymous&gt; [90m(/agents/packages/cli/[39mnode_modules/[4m@testing-library[24m/react/dist/act-compat.js:47:25[90m)[39m
    at [90m/agents/packages/cli/[39msrc/ui/hooks/useGeminiStream.test.tsx:1165:13
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///agents/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useGitBranchName.test.ts" timestamp="2025-08-12T09:09:11.683Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="2" time="0.019964708">
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should return branch name" time="0.012591917">
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should return undefined if git command fails" time="0.001494958">
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should return short commit hash if branch is HEAD (detached state)" time="0.001503875">
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should return undefined if branch is HEAD and getting commit hash fails" time="0.001139125">
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should update branch name when .git/HEAD changes" time="0.000420834">
            <skipped/>
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should handle watcher setup error silently" time="0.001670833">
        </testcase>
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="useGitBranchName &gt; should cleanup watcher on unmount" time="0.000220083">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useHistoryManager.test.ts" timestamp="2025-08-12T09:09:11.685Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.016677834">
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should initialize with an empty history" time="0.008849875">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should add an item to history with a unique ID" time="0.002122334">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should generate unique IDs for items added with the same base timestamp" time="0.000908875">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should update an existing history item" time="0.000855833">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should not change history if updateHistoryItem is called with a non-existent ID" time="0.000721458">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should clear the history" time="0.000749542">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should not add consecutive duplicate user messages" time="0.000808084">
        </testcase>
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="useHistoryManager &gt; should add duplicate user messages if they are not consecutive" time="0.000732625">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useInputHistory.test.ts" timestamp="2025-08-12T09:09:11.687Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.018901708">
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; should initialize with historyIndex -1 and empty originalQueryBeforeNav" time="0.008486583">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; handleSubmit &gt; should call onSubmit with trimmed value and reset history" time="0.001784292">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; handleSubmit &gt; should not call onSubmit if value is empty after trimming" time="0.000744875">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateUp &gt; should not navigate if isActive is false" time="0.00083175">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateUp &gt; should not navigate if userMessages is empty" time="0.000701666">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateUp &gt; should call onChange with the last message when navigating up from initial state" time="0.001156167">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateUp &gt; should store currentQuery as originalQueryBeforeNav on first navigateUp" time="0.000871458">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateUp &gt; should navigate through history messages on subsequent navigateUp calls" time="0.000929917">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateDown &gt; should not navigate if isActive is false" time="0.000885459">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateDown &gt; should not navigate if historyIndex is -1 (not in history navigation)" time="0.000645834">
        </testcase>
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="useInputHistory &gt; navigateDown &gt; should restore originalQueryBeforeNav when navigating down to initial state" time="0.000854166">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useKeypress.test.ts" timestamp="2025-08-12T09:09:11.690Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.026616">
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; should not listen if isActive is false" time="0.008517625">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; should listen for keypress when active" time="0.002263458">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; should set and release raw mode" time="0.001012208">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; should stop listening after being unmounted" time="0.000709542">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; should correctly identify alt+enter (meta key)" time="0.000749959">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Modern Node (&gt;= v20)&apos; &gt; should process a paste as a single event" time="0.001134834">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Modern Node (&gt;= v20)&apos; &gt; should handle keypress interspersed with pastes" time="0.000968292">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Modern Node (&gt;= v20)&apos; &gt; should emit partial paste content if unmounted mid-paste" time="0.000779583">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Legacy Node (&lt; v20)&apos; &gt; should process a paste as a single event" time="0.003610083">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Legacy Node (&lt; v20)&apos; &gt; should handle keypress interspersed with pastes" time="0.001329167">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Legacy Node (&lt; v20)&apos; &gt; should emit partial paste content if unmounted mid-paste" time="0.0009345">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Workaround Env Var&apos; &gt; should process a paste as a single event" time="0.000780959">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Workaround Env Var&apos; &gt; should handle keypress interspersed with pastes" time="0.00090375">
        </testcase>
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="useKeypress &gt; Paste Handling in &apos;Workaround Env Var&apos; &gt; should emit partial paste content if unmounted mid-paste" time="0.00083225">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useLoadingIndicator.test.ts" timestamp="2025-08-12T09:09:11.693Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.018249">
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="useLoadingIndicator &gt; should initialize with default values when Idle" time="0.009244417">
        </testcase>
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="useLoadingIndicator &gt; should reflect values when Responding" time="0.002991584">
        </testcase>
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="useLoadingIndicator &gt; should show waiting phrase and retain elapsedTime when WaitingForConfirmation" time="0.001908416">
        </testcase>
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="useLoadingIndicator &gt; should reset elapsedTime and use a witty phrase when transitioning from WaitingForConfirmation to Responding" time="0.001645875">
        </testcase>
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="useLoadingIndicator &gt; should reset timer and phrase when streamingState changes from Responding to Idle" time="0.001368625">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/usePhraseCycler.test.ts" timestamp="2025-08-12T09:09:11.694Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.018586125">
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should initialize with the first witty phrase when not active and not waiting" time="0.009485292">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should show &quot;Waiting for user confirmation...&quot; when isWaiting is true" time="0.001677417">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should not cycle phrases if isActive is false and not waiting" time="0.000957625">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should cycle through witty phrases when isActive is true and not waiting" time="0.001324167">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should reset to a witty phrase when isActive becomes true after being false (and not waiting)" time="0.002110125">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should clear phrase interval on unmount when active" time="0.000890375">
        </testcase>
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="usePhraseCycler &gt; should reset to a witty phrase when transitioning from waiting to active" time="0.001172792">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useShellHistory.test.ts" timestamp="2025-08-12T09:09:11.696Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.5507365">
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should initialize and read the history file from the correct path" time="0.061877667">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should handle a non-existent history file gracefully" time="0.054083625">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should add a command and write to the history file" time="0.108265333">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should navigate history correctly with previous/next commands" time="0.055178917">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should not add empty or whitespace-only commands to history" time="0.055417041">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should truncate history to MAX_HISTORY_LENGTH (100)" time="0.107326875">
        </testcase>
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="useShellHistory &gt; should move an existing command to the top when re-added" time="0.107610083">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useSynapticMemory.test.ts" timestamp="2025-08-12T09:09:11.698Z" hostname="63accec1df8b" tests="12" failures="12" errors="0" skipped="0" time="11.887008839">
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 初期状態が正しく設定されること" time="0.018682917">
            <failure message="expected undefined to be true // Object.is equality" type="AssertionError">
AssertionError: expected undefined to be true // Object.is equality

- Expected: 
true

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:108:38
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 初期化後にデータが読み込まれること" time="1.021556917">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:117:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; searchMemoriesが正しく動作すること" time="1.003322084">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:131:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; activateMemoryが正しく動作すること" time="1.014642625">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:150:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; refreshDataが正しく動作すること" time="1.178634959">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:173:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 初期化エラーが正しくハンドリングされること" time="1.633648084">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:201:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 検索エラーが正しくハンドリングされること" time="1.003337418">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:214:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 活性化エラーが正しくハンドリングされること" time="1.002873708">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:231:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; データ更新エラーが正しくハンドリングされること" time="1.002891417">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:256:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; クリーンアップが正しく実行されること" time="1.002277667">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:273:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 複数回の検索が正しく動作すること" time="1.002007792">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:285:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useSynapticMemory.test.ts" name="useSynapticMemory &gt; 同期的な活性化操作が正しく動作すること" time="1.001970417">
            <failure message="expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
[36m&lt;html&gt;[39m
  [36m&lt;head /&gt;[39m
  [36m&lt;body&gt;[39m
    [36m&lt;div /&gt;[39m
  [36m&lt;/body&gt;[39m
[36m&lt;/html&gt;[39m" type="AssertionError">
AssertionError: expected undefined to be false // Object.is equality

Ignored nodes: comments, script, style
&lt;html&gt;
  &lt;head /&gt;
  &lt;body&gt;
    &lt;div /&gt;
  &lt;/body&gt;
&lt;/html&gt;

- Expected: 
false

+ Received: 
undefined

 ❯ src/ui/hooks/useSynapticMemory.test.ts:314:40
 ❯ runWithExpensiveErrorDiagnosticsDisabled node_modules/@testing-library/dom/dist/config.js:47:12
 ❯ checkCallback node_modules/@testing-library/dom/dist/wait-for.js:124:77
 ❯ Timeout.checkRealTimersCallback node_modules/@testing-library/dom/dist/wait-for.js:118:16
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useTimer.test.ts" timestamp="2025-08-12T09:09:11.705Z" hostname="63accec1df8b" tests="8" failures="0" errors="0" skipped="0" time="0.018636">
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should initialize with 0" time="0.009243542">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should not increment time if isActive is false" time="0.001043625">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should increment time every second if isActive is true" time="0.001710417">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should reset to 0 and start incrementing when isActive becomes true from false" time="0.001045792">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should reset to 0 when resetKey changes while active" time="0.001109291">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should be 0 if isActive is false, regardless of resetKey changes" time="0.000767166">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should clear timer on unmount" time="0.0013505">
        </testcase>
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="useTimer &gt; should preserve elapsedTime when isActive becomes false, and reset to 0 when it becomes active again" time="0.001331083">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useToolScheduler.test.ts" timestamp="2025-08-12T09:09:11.707Z" hostname="63accec1df8b" tests="21" failures="2" errors="0" skipped="4" time="0.0492155">
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler in YOLO Mode &gt; should skip confirmation and execute tool directly when yoloMode is true" time="0.034868916">
            <system-out>
[DEBUG] Tool execution completed for mockToolRequiresConfirmation (yoloCall): {
  toolResult: [32m&apos;YOLO Confirmed output&apos;[39m,
  returnDisplay: [32m&apos;YOLO Formatted tool output&apos;[39m
}
[DEBUG] Function response created for mockToolRequiresConfirmation (yoloCall): {
  functionResponse: {
    id: [32m&apos;yoloCall&apos;[39m,
    name: [32m&apos;mockToolRequiresConfirmation&apos;[39m,
    response: { output: [32m&apos;YOLO Confirmed output&apos;[39m }
  }
}

            </system-out>
            <failure message="expected &quot;spy&quot; to be called with arguments: [ [ ObjectContaining{…} ] ][90m

Number of calls: [1m0[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ [ ObjectContaining{…} ] ]

Number of calls: 0

 ❯ src/ui/hooks/useToolScheduler.test.ts:169:24
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; initial state should be empty" time="0.001257959">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should schedule and execute a tool call successfully" time="0.001860375">
            <system-out>
[DEBUG] Tool execution completed for mockTool (call1): { toolResult: [32m&apos;Tool output&apos;[39m, returnDisplay: [32m&apos;Formatted tool output&apos;[39m }
[DEBUG] Function response created for mockTool (call1): {
  functionResponse: {
    id: [32m&apos;call1&apos;[39m,
    name: [32m&apos;mockTool&apos;[39m,
    response: { output: [32m&apos;Tool output&apos;[39m }
  }
}

            </system-out>
            <failure message="expected &quot;spy&quot; to be called with arguments: [ [ ObjectContaining{…} ] ][90m

Number of calls: [1m0[22m
[39m" type="AssertionError">
AssertionError: expected &quot;spy&quot; to be called with arguments: [ [ ObjectContaining{…} ] ]

Number of calls: 0

 ❯ src/ui/hooks/useToolScheduler.test.ts:314:24
            </failure>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle tool not found" time="0.003190708">
            <system-out>
Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:95:5)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle error during shouldConfirmExecute" time="0.001507958">
            <system-out>
Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle error during execute" time="0.001392875">
            <system-out>
Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle tool requiring confirmation - approved" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle tool requiring confirmation - cancelled by user" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should handle live output updates" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should schedule and execute multiple tool calls" time="0.002393334">
            <system-out>
[DEBUG] Tool execution completed for tool1 (multi1): { toolResult: [32m&apos;Output 1&apos;[39m, returnDisplay: [32m&apos;Display 1&apos;[39m }
[DEBUG] Function response created for tool1 (multi1): {
  functionResponse: { id: [32m&apos;multi1&apos;[39m, name: [32m&apos;tool1&apos;[39m, response: { output: [32m&apos;Output 1&apos;[39m } }
}
[DEBUG] Tool execution completed for tool2 (multi2): { toolResult: [32m&apos;Output 2&apos;[39m, returnDisplay: [32m&apos;Display 2&apos;[39m }
[DEBUG] Function response created for tool2 (multi2): {
  functionResponse: { id: [32m&apos;multi2&apos;[39m, name: [32m&apos;tool2&apos;[39m, response: { output: [32m&apos;Output 2&apos;[39m } }
}

Failed to record tool execution in memory: Error: MemoryManager not initialized. Please provide config on first call.
    at getMemoryManager [90m(/agents/packages/cli/[39msrc/memory/memoryManager.ts:333:11[90m)[39m
    at CoreToolScheduler.onAllToolCallsComplete [90m(/agents/packages/cli/[39msrc/ui/hooks/useReactToolScheduler.ts:113:31[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="useReactToolScheduler &gt; should throw error if scheduling while already running" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;validating&apos; (validating) correctly" time="0.000379583">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;awaiting_approval&apos; (awaiting_approval) correctly" time="0.000147083">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;scheduled&apos; (scheduled) correctly" time="0.000134667">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;executing&apos; (executing no live output) correctly" time="0.000160541">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;executing&apos; (executing with live output) correctly" time="0.000132542">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;success&apos; (success) correctly" time="0.000127792">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;error&apos; (error tool not found) correctly" time="0.000132666">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;error&apos; (error tool execution failed) correctly" time="0.000197167">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map ToolCall with status &apos;cancelled&apos; (cancelled) correctly" time="0.000134291">
        </testcase>
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="mapToDisplay &gt; should map an array of ToolCalls correctly" time="0.000188042">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/MarkdownDisplay.test.tsx" timestamp="2025-08-12T09:09:11.715Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.139390292">
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders nothing for empty text" time="0.008858167">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a simple paragraph" time="0.004494083">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders headers with correct levels" time="0.002435375">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a fenced code block with a language" time="0.010292833">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a fenced code block without a language" time="0.080679625">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; handles unclosed (pending) code blocks" time="0.002461833">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders unordered lists with different markers" time="0.001876292">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders nested unordered lists" time="0.001523583">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders ordered lists" time="0.001571791">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders horizontal rules" time="0.001581917">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders tables correctly" time="0.004821166">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; handles a table at the end of the input" time="0.0015045">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; inserts a single space between paragraphs" time="0.000887208">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; correctly parses a mix of markdown elements" time="0.015363042">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/clipboardUtils.test.ts" timestamp="2025-08-12T09:09:11.719Z" hostname="63accec1df8b" tests="6" failures="0" errors="0" skipped="0" time="0.002775625">
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; clipboardHasImage &gt; should return false on non-macOS platforms" time="0.000735125">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; clipboardHasImage &gt; should return boolean on macOS" time="0.000082792">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; saveClipboardImage &gt; should return null on non-macOS platforms" time="0.000126625">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; saveClipboardImage &gt; should handle errors gracefully" time="0.000057917">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; cleanupOldClipboardImages &gt; should not throw errors" time="0.000665709">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; cleanupOldClipboardImages &gt; should complete without errors on valid directory" time="0.0003425">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/computeStats.test.ts" timestamp="2025-08-12T09:09:11.721Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.002980834">
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateErrorRate &gt; should return 0 if totalRequests is 0" time="0.000847209">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateErrorRate &gt; should calculate the error rate correctly" time="0.000086125">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateAverageLatency &gt; should return 0 if totalRequests is 0" time="0.000067917">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateAverageLatency &gt; should calculate the average latency correctly" time="0.000089125">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateCacheHitRate &gt; should return 0 if prompt tokens is 0" time="0.000126167">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateCacheHitRate &gt; should calculate the cache hit rate correctly" time="0.000053833">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should return all zeros for initial empty metrics" time="0.000476125">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate API and tool time percentages" time="0.000144542">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate cache efficiency" time="0.000102625">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate success and agreement rates" time="0.00007075">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should handle division by zero gracefully" time="0.000097583">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/displayUtils.test.ts" timestamp="2025-08-12T09:09:11.723Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.001879542">
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return green for values &gt;= green threshold" time="0.000776958">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return yellow for values &lt; green and &gt;= yellow threshold" time="0.000097542">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return red for values &lt; yellow threshold" time="0.000070167">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return defaultColor for values &lt; yellow threshold when provided" time="0.000080959">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; Threshold Constants &gt; should have the correct values" time="0.000130292">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/errorParsing.test.ts" timestamp="2025-08-12T09:09:11.724Z" hostname="63accec1df8b" tests="21" failures="0" errors="0" skipped="0" time="0.003364292">
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a valid API error JSON" time="0.000818041">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the default message" time="0.000223">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the personal message" time="0.000145375">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the vertex message" time="0.000065916">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message if it is not a JSON error" time="0.000038709">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message for malformed JSON" time="0.000043459">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle JSON that does not match the ApiError structure" time="0.000044833">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a nested API error" time="0.000069042">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a StructuredError" time="0.000042458">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 StructuredError with the vertex message" time="0.000051459">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle an unknown error type" time="0.000034542">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Free tier)" time="0.000084459">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth" time="0.000111042">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with generic quota exceeded message for Google auth" time="0.000090125">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should prioritize Pro quota message over generic quota message for Google auth" time="0.000183084">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Standard tier)" time="0.00011225">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Legacy tier)" time="0.000105584">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle different Gemini 2.5 version strings in Pro quota exceeded errors" time="0.000108042">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should not match non-Pro models with similar version strings" time="0.000103167">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a generic quota exceeded message for Google auth (Standard tier)" time="0.00011225">
        </testcase>
        <testcase classname="src/ui/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth (Standard tier)" time="0.000083042">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/formatters.test.ts" timestamp="2025-08-12T09:09:11.729Z" hostname="63accec1df8b" tests="14" failures="0" errors="0" skipped="0" time="0.002142542">
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into KB" time="0.000757625">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into MB" time="0.0000745">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into GB" time="0.000056042">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format milliseconds less than a second" time="0.000088458">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration of 0" time="0.000049916">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of seconds" time="0.000040333">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in seconds with one decimal place" time="0.000040292">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of minutes" time="0.000039958">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in minutes and seconds" time="0.00003775">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of hours" time="0.000038167">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in hours and seconds" time="0.000036042">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in hours, minutes, and seconds" time="0.000036083">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should handle large durations" time="0.000036459">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should handle negative durations" time="0.000053584">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/markdownUtilities.test.ts" timestamp="2025-08-12T09:09:11.733Z" hostname="63accec1df8b" tests="7" failures="0" errors="0" skipped="0" time="0.00176125">
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should split at the last double newline if not in a code block" time="0.000777292">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if no safe split point is found" time="0.000077708">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should prioritize splitting at 

 over being at the very end of the string if the end is not in a code block" time="0.000047167">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if the only 

 is inside a code block and the end of content is not" time="0.000047292">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should correctly identify the last 

 even if it is followed by text not in a code block" time="0.000040166">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if content is empty" time="0.000038542">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if content has no newlines and no code blocks" time="0.00003725">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/textUtils.test.ts" timestamp="2025-08-12T09:09:11.734Z" hostname="63accec1df8b" tests="5" failures="0" errors="0" skipped="0" time="0.001820958">
        <testcase classname="src/ui/utils/textUtils.test.ts" name="textUtils &gt; isBinary &gt; should return true for a buffer containing a null byte" time="0.000731583">
        </testcase>
        <testcase classname="src/ui/utils/textUtils.test.ts" name="textUtils &gt; isBinary &gt; should return false for a buffer containing only text" time="0.000093834">
        </testcase>
        <testcase classname="src/ui/utils/textUtils.test.ts" name="textUtils &gt; isBinary &gt; should return false for an empty buffer" time="0.000049916">
        </testcase>
        <testcase classname="src/ui/utils/textUtils.test.ts" name="textUtils &gt; isBinary &gt; should return false for a null or undefined buffer" time="0.000054541">
        </testcase>
        <testcase classname="src/ui/utils/textUtils.test.ts" name="textUtils &gt; isBinary &gt; should only check the sample size" time="0.000170542">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/updateCheck.test.ts" timestamp="2025-08-12T09:09:11.736Z" hostname="63accec1df8b" tests="6" failures="1" errors="0" skipped="0" time="0.014943583">
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if package.json is missing" time="0.000844916">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if there is no update" time="0.000091041">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return a message if a newer version is available" time="0.009812375">
            <failure message="the given combination of arguments (null and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string" type="AssertionError">
AssertionError: the given combination of arguments (null and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string
 ❯ src/ui/utils/updateCheck.test.ts:50:20
            </failure>
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if the latest version is the same as the current version" time="0.000488625">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if the latest version is older than the current version" time="0.00045425">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should handle errors gracefully" time="0.0016355">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/DiffRenderer.test.tsx" timestamp="2025-08-12T09:09:11.738Z" hostname="63accec1df8b" tests="13" failures="0" errors="0" skipped="0" time="0.155542084">
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with correct language for new file with known extension" time="0.020490875">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with null language for new file with unknown extension" time="0.082071709">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with null language for new file if no filename is provided" time="0.01188525">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should render diff content for existing file (not calling colorizeCode directly for the whole block)" time="0.002955167">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should handle diff with only header and no changes" time="0.001527334">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should handle empty diff content" time="0.000558833">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should render a gap indicator for skipped lines" time="0.005255375">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should not render a gap indicator for small gaps (&lt;= MAX_CONTEXT_LINES_WITHOUT_GAP)" time="0.006679583">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 80 and height undefined" time="0.007752">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 80 and height 6" time="0.003591541">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 30 and height 6" time="0.003452375">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with a SVN diff format" time="0.002672917">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a new file with no file extension correctly" time="0.005762458">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/ToolConfirmationMessage.test.tsx" timestamp="2025-08-12T09:09:11.741Z" hostname="63accec1df8b" tests="2" failures="0" errors="0" skipped="0" time="0.023169958">
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; should not display urls if prompt and url are the same" time="0.017613334">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; should display urls if prompt and url are different" time="0.00484575">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/ToolMessage.test.tsx" timestamp="2025-08-12T09:09:11.741Z" hostname="63accec1df8b" tests="11" failures="0" errors="0" skipped="0" time="0.032130166">
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders basic tool information" time="0.015797125">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows ✔ for Success status" time="0.001396125">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows o for Pending status" time="0.001278834">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows ? for Confirming status" time="0.001384042">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows - for Canceled status" time="0.001138334">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows x for Error status" time="0.001300875">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows paused spinner for Executing status when streamingState is Idle" time="0.001555292">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows paused spinner for Executing status when streamingState is WaitingForConfirmation" time="0.001216917">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows MockRespondingSpinner for Executing status when streamingState is Responding" time="0.001430041">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders DiffRenderer for diff results" time="0.00188475">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders emphasis correctly" time="0.002922709">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/MaxSizedBox.test.tsx" timestamp="2025-08-12T09:09:11.744Z" hostname="63accec1df8b" tests="21" failures="0" errors="0" skipped="0" time="0.0449885">
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; renders children without truncation when they fit" time="0.013594916">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; hides lines when content exceeds maxHeight" time="0.001617875">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; hides lines at the end when content exceeds maxHeight and overflowDirection is bottom" time="0.001051042">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text that exceeds maxWidth" time="0.001652375">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles mixed wrapping and non-wrapping segments" time="0.005383">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles words longer than maxWidth by splitting them" time="0.003221541">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; does not truncate when maxHeight is undefined" time="0.000843875">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows plural &quot;lines&quot; when more than one line is hidden" time="0.000883041">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows plural &quot;lines&quot; when more than one line is hidden and overflowDirection is bottom" time="0.000846708">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; renders an empty box for empty children" time="0.000338458">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text with multi-byte unicode characters correctly" time="0.000846833">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text with multi-byte emoji characters correctly" time="0.0012215">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; falls back to an ellipsis when width is extremely small" time="0.000829125">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates long non-wrapping text with ellipsis" time="0.000654375">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates non-wrapping text containing line breaks" time="0.001331375">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates emoji characters correctly with ellipsis" time="0.000856791">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows ellipsis for multiple rows with long non-wrapping text" time="0.001382583">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; accounts for additionalHiddenLinesCount" time="0.000964875">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles React.Fragment as a child" time="0.001347625">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; clips a long single text child from the top" time="0.002627208">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; clips a long single text child from the bottom" time="0.002578667">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/text-buffer.test.ts" timestamp="2025-08-12T09:09:11.749Z" hostname="63accec1df8b" tests="73" failures="0" errors="0" skipped="0" time="0.092912584">
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; should return the initial state if state is undefined" time="0.002140709">
            <system-err>
Unknown action encountered: [object Object]

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; set_text action &gt; should set new text and move cursor to the end" time="0.000331625">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; set_text action &gt; should not create an undo snapshot if pushToUndo is false" time="0.000114583">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; insert action &gt; should insert a character" time="0.000290167">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; insert action &gt; should insert a newline" time="0.000116125">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; backspace action &gt; should remove a character" time="0.000083">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; backspace action &gt; should join lines if at the beginning of a line" time="0.000105917">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; undo/redo actions &gt; should undo and redo a change" time="0.000200834">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="textBufferReducer &gt; create_undo_snapshot action &gt; should create a snapshot without changing state" time="0.000156875">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should initialize with empty text and cursor at (0,0) by default" time="0.009269">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should initialize with provided initialText" time="0.001887542">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should initialize with initialText and initialCursorOffset" time="0.00103525">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should wrap visual lines" time="0.001026625">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should wrap visual lines with multiple spaces" time="0.000878208">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should wrap visual lines even without spaces" time="0.000761292">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Initialization &gt; should initialize with multi-byte unicode characters and correct cursor offset" time="0.001521958">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Basic Editing &gt; insert: should insert a character and update cursor" time="0.001252292">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Basic Editing &gt; insert: should insert text in the middle of a line" time="0.001032541">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Basic Editing &gt; newline: should create a new line and move cursor" time="0.000988125">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Basic Editing &gt; backspace: should delete char to the left or merge lines" time="0.00126625">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Basic Editing &gt; del: should delete char to the right or merge lines" time="0.0009825">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Drag and Drop File Paths &gt; should prepend @ to a valid file path on insert" time="0.0009745">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Drag and Drop File Paths &gt; should not prepend @ to an invalid file path on insert" time="0.001739416">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Drag and Drop File Paths &gt; should handle quoted paths" time="0.000811542">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Drag and Drop File Paths &gt; should not prepend @ to short text that is not a path" time="0.0007135">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Shell Mode Behavior &gt; should not prepend @ to valid file paths when shellModeActive is true" time="0.001158833">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Shell Mode Behavior &gt; should not prepend @ to quoted paths when shellModeActive is true" time="0.000797375">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Shell Mode Behavior &gt; should behave normally with invalid paths when shellModeActive is true" time="0.000774791">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Shell Mode Behavior &gt; should behave normally with short text when shellModeActive is true" time="0.000664541">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Cursor Movement &gt; move: left/right should work within and across visual lines (due to wrapping)" time="0.002483375">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Cursor Movement &gt; move: up/down should preserve preferred visual column" time="0.002378708">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Cursor Movement &gt; move: home/end should go to visual line start/end" time="0.0018575">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Visual Layout &amp; Viewport &gt; should wrap long lines correctly into visualLines" time="0.000896541">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Visual Layout &amp; Viewport &gt; should update visualScrollRow when visualCursor moves out of viewport" time="0.00210075">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Undo/Redo &gt; should undo and redo an insert operation" time="0.000907125">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Undo/Redo &gt; should undo and redo a newline operation" time="0.00102225">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Unicode Handling &gt; insert: should correctly handle multi-byte unicode characters" time="0.00069775">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Unicode Handling &gt; backspace: should correctly delete multi-byte unicode characters" time="0.000826084">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Unicode Handling &gt; move: left/right should treat multi-byte chars as single units for visual cursor" time="0.001053958">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should insert printable characters" time="0.00101125">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle &quot;Enter&quot; key as newline" time="0.000681834">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle &quot;Backspace&quot; key" time="0.000777583">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle multiple delete characters in one input" time="0.000831458">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle inserts that contain delete characters " time="0.000780708">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle inserts with a mix of regular and delete characters " time="0.000903917">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle arrow keys for movement" time="0.003993959">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should strip ANSI escape codes when pasting text" time="0.001393416">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should handle VSCode terminal Shift+Enter as newline" time="0.001569458">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; handleInput &gt; should correctly handle repeated pasting of long text" time="0.019284875">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should replace a single-line range with single-line text" time="0.000961083">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should replace a multi-line range with single-line text" time="0.001088959">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should delete a range when replacing with an empty string" time="0.001238833">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should handle replacing at the beginning of the text" time="0.000663667">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should handle replacing at the end of the text" time="0.000680083">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should handle replacing the entire buffer content" time="0.001064833">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should correctly replace with unicode characters" time="0.000990542">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; should handle invalid range by returning false and not changing text" time="0.000709333">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; replaceRange &gt; replaceRange: multiple lines with a single character" time="0.000738959">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Input Sanitization &gt; should strip ANSI escape codes from input" time="0.000690083">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Input Sanitization &gt; should strip control characters from input" time="0.000706584">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Input Sanitization &gt; should strip mixed ANSI and control characters from input" time="0.00062225">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Input Sanitization &gt; should not strip standard characters or newlines" time="0.00069">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="useTextBuffer &gt; Input Sanitization &gt; should sanitize pasted text via handleInput" time="0.000889375">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should return [0,0] for offset 0" time="0.000072458">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle single line text" time="0.000110625">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle multi-line text" time="0.000265833">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle empty lines" time="0.000108208">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle text ending with a newline" time="0.000075167">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle text starting with a newline" time="0.000070875">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle empty string input" time="0.000057625">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle multi-byte unicode characters correctly" time="0.000137583">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle offset exactly at newline character" time="0.000060292">
        </testcase>
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="offsetToLogicalPos &gt; should handle offset in the middle of a multi-byte character (should place at start of that char)" time="0.000071166">
        </testcase>
    </testsuite>
</testsuites>
